openapi: 3.0.0
x-stoplight:
  id: 333e8c257efc6
info:
  title: Identity Managed API
  version: 1.x
  description: |
    This is an API for those who want to create, emit and offer verifiable credentials or VC's (https://www.w3.org/TR/vc-data-model-2.0/), using bloock product's and following the principles of self-sovereign identity and privacy by default. 

    ---

    ## Table of Contents

    - [Installation](#installation)
        - [Docker Setup Guide](#docker-setup-guide)
            - [Option 1: Pull and Run the Docker Image](#option-1-pull-and-run-the-docker-image)
            - [Option 2: Use Docker Compose with Database Containers](#option-2-use-docker-compose-with-database-containers)
    - [Configuration](#configuration)
        - [Variables](#variables)
    - [Database Support](#database-support)
    - [Documentation](#documentation)
    - [License](#license)

    ---

    ## Installation

    You have one primary method to set up and run the Identity Bloock Managed API:

    1. [Docker Setup Guide](#docker-setup-guide)

    Each method has its advantages and use cases.

    ### Docker Setup Guide

    Docker offers a convenient way to package and distribute the API, along with its required dependencies, in a self-contained environment. It's an excellent choice if you want a quick and hassle-free setup, or if you prefer isolation between your application and the host system.

    ### Option 1: Pull and Run the Docker Image

    This option is straightforward and ideal if you want to get started quickly. Follow these steps:

    1. **Pull the Docker Image:**

        - Open your terminal or command prompt.

        - Run the following command to pull the Docker image from [DockerHub](https://hub.docker.com/r/bloock/identity-managed-api):

          ```bash
          docker pull bloock/identity-managed-api
          ```

          This command fetches the latest version of the Identity Bloock Managed API image from [DockerHub](https://hub.docker.com/r/bloock/identity-managed-api). We maintain a Docker repository with the latest releases of this repository.


    2. **Create a `.env` File:**

        - In your project directory, create a `.env` file. You can use a text editor of your choice to create this file.

        - This file will contain the configuration for the API, including environment variables. Refer to the [Variables](#variables) section for a list of environment variables and their descriptions.

        - In the `.env` file, define the environment variables you want to configure for the API. Each environment variable should be set in the following format:
          ```txt
          VARIABLE_NAME=VALUE
          ```

        - Here's an example of what your `.env` file might look like:

          ```txt
          BLOOCK_DB_CONNECTION_STRING=file:bloock?mode=memory&cache=shared&_fk=1
          BLOOCK_BLOOCK_API_KEY=your_api_key
          BLOOCK_BLOOCK_WEBHOOK_SECRET_KEY=your_webhook_secret_key
          ```

          > **NOTE:** For the **BLOOCK_DB_CONNECTION_STRING** environment variable, you have the flexibility to specify your own MySQL or PostgreSQL infrastructure. Clients can provide their connection string for their database infrastructure. See the [Database](#database-support) section for available connections.

    3. **Run the Docker Image with Environment Variables:**

        - Run the following command to start the Identity Bloock Managed API container while passing the `.env` file as an environment variable source:

         ```bash
         docker run --env-file .env -p 8080:8080 bloock/identity-managed-api
         ```

        - This command maps the `.env` file into the container, ensuring that the API reads its configuration from the file. Viper automatically read these environment variables and make them accessible to the code.

        - By default, the above command runs the Docker container in the foreground, displaying API logs and output in your terminal. You can interact with the API while it's running.

       3.1. **Running Docker in the Background (Daemon Mode)**

        - Append the `-d` flag to the docker run command as follows:

        ```bash
        docker run -d --env-file config.txt -p 8080:8080 bloock/identity-managed-api
        ```

       The `-d` flag tells Docker to run the container as a background process. You can continue using your terminal for other tasks while the Identity Bloock Managed API container runs silently in the background.


    4. **Access the API:**

        - After running the Docker image, the Identity Bloock Managed API will be accessible at `http://localhost:8080`.

        - You can now make API requests to interact with the service.

    By following these steps, you can quickly deploy the Identity Bloock Managed API as a Docker container with your customized configuration.

    ### Option 2: Use Docker Compose with Database Containers

    If you need a more complex setup, such as using a specific database like **MySQL**, **Postgres** or **MemDB**, Docker Compose is your choice. Follow these steps:

    1. **Choose the Docker Compose File:**

        - In our [repository](https://github.com/bloock/bloock-identity-managed-api), you will find Docker Compose files for different database types:

            - `docker-compose-mysql.yaml` for MySQL
            - `docker-compose-postgres.yaml` for PostgreSQL
            - `docker-compose.yaml for MemDB` (SQLite)


    2. **Copy the Chosen Docker Compose File:**

        - Choose the Docker Compose file that corresponds to the database type you want to use. For example, if you prefer MySQL, copy `docker-compose-mysql.yaml`.


    3. **Configure Environment Variables:**

        - Open the Docker Compose file in a text editor. Inside the file, locate the environment section for the api service. Here, you can specify environment variables that configure the API.

        - Refer to the [Variables](#variables) section for a list of environment variables and their descriptions.


    4. **Set Environment Variables:**

        - In the `environment` section, you can set environment variables in the following format:
          ```yaml
          VARIABLE_NAME: "VALUE"
          ```

        - Here's an example of what your `environment` section might look like:

          ```yaml
          environment:
            BLOOCK_DB_CONNECTION_STRING: "file:bloock?mode=memory&cache=shared&_fk=1"
            BLOOCK_BLOOCK_API_KEY: "your_api_key"
            BLOOCK_BLOOCK_WEBHOOK_SECRET_KEY: "your_webhook_secret_key"
          ```

    5. **Run Docker Compose:**

        - Open your terminal, navigate to the directory where you saved the Docker Compose file, and run the following command:

        ```bash
         docker-compose -f docker-compose-mysql.yaml up
         ```

       Replace `docker-compose-mysql.yaml` with the name of the Docker Compose file you selected.

       5.1. **Running Docker in the Background (Daemon Mode)**

        - Append the `-d` flag to the docker run command as follows:

        ```bash
        docker-compose -f docker-compose-mysql.yaml up -d
        ```

       The `-d` flag tells Docker to run the container as a background process. You can continue using your terminal for other tasks while the Identity Bloock Managed API container runs silently in the background.


    6. **Access the API:**

        - After running the Docker Compose command, the Identity Bloock Managed API will be accessible at http://localhost:8080. You can make API requests to interact with the service.

    By following these steps, you can quickly set up the Identity Bloock Managed API with your chosen database type using the provided Docker Compose files.

    ---

    ## Configuration

    The Identity Bloock Managed API leverages Viper, a powerful configuration management library, currently supporting environment variables and a YAML configuration file.

    ### Variables

    Here are the configuration variables used by the Identity Bloock Managed API.

    Basic configuration:

    - **BLOOCK_BLOOCK_API_KEY** (**REQUIRED**)
        - **Description**: Your unique [BLOOCK API key](https://docs.bloock.com/libraries/authentication/create-an-api-key).
        - **Purpose**: This [API key](https://docs.bloock.com/libraries/authentication/create-an-api-key) is required for authentication and authorization when interacting with the Bloock Identity Managed API. It allows you to securely access and use the API's features.
        - **[Create API Key](https://docs.bloock.com/libraries/authentication/create-an-api-key)**
        - **Example**: no9rLf9dOMjXGvXQX3I96a39qYFoZknGd6YHtY3x1VPelr6M-TmTLpAF-fm1k9Zi
    - **BLOOCK_BLOOCK_WEBHOOK_SECRET_KEY** (***REQUIRED***)
        - **Description**: Your [BLOOCK webhook secret key](https://docs.bloock.com/webhooks/overview).
        - **Purpose**: The [webhook secret key](https://docs.bloock.com/webhooks/overview) is used to secure and verify incoming webhook requests. It ensures that webhook data is received from a trusted source and has not been tampered with during transmission.
        - **[Create webhook](https://docs.bloock.com/webhooks/overview)**
        - **Example**: ew1b2d5qf7WeUOPy1u1CW6FXro6j5plS
    - **BLOOCK_API_PUBLIC_HOST** (***REQUIRED***)
        - **Description**: Should contain the complete URL, including the protocol (`https://`) and domain or host name. It is essential to ensure that the provided URL is accessible and correctly points to you API's public endpoint.
        - **Purpose**: Is used to specify the public host or URL of this deployed API. Allows other software clients applications (ex: PolygonID wallet) to make HTTP requests and API calls to interact with this service.
        - **Example**: https://1039-94-132-61-84.ngrok-free.app
    - **BLOOCK_DB_CONNECTION_STRING** (***OPTIONAL***)
        - **Description**: Your custom database connection URL.
        - **Default**: "file:bloock?mode=memory&cache=shared&_fk=1"
        - **Purpose**: This variable allows you to specify your own [database](#database-support) connection string. You can use it to connect the API to your existing database infrastructure. The format depends on the [database](#database-support) type you choose.
        - **Required**: When docker database container or your existing database infrastructure provided.
    - **BLOOCK_AUTH_SECRET** (***OPTIONAL***)
        - **Description**: If you want to add control in your API calls with Bearer Token you can add a secret here. A Bearer token is a type of token used for authentication and authorization and is used in web applications and APIs to hold user credentials and indicate authorization for requests and access.
        - **Purpose**: The idea is that you can set a secret, which will be the same that you will have to pass in the headers of your requests in order to validate yourself.
        - **Example**: 0tEStdP(dg5=VU4iX4+7}e((HVd^ShVm
    - **BLOOCK_API_HOST** (***OPTIONAL***)
        - **Description**: The API host IP address.
        - **Default**: 0.0.0.0
        - **Purpose**: This variable allows you to specify the IP address on which the Identity Bloock Managed API should listen for incoming requests. You can customize it based on your network configuration.
    - **BLOOCK_API_PORT** (***OPTIONAL***)
        - **Description**: The API port number.
        - **Default**: 8080
        - **Purpose**: The API listens on this port for incoming HTTP requests. You can adjust it to match your preferred port configuration.
    - **BLOOCK_API_DEBUG_MODE** (***OPTIONAL***)
        - **Description**:  Enable or disable debug mode.
        - **Default**: false
        - **Purpose**: When set to true, debug mode provides more detailed log information, which can be useful for troubleshooting and debugging. Set it to false for normal operation.
        
    Advanced configuration. Please only edit these variables if you are familiar with the Bloock digital identity protocol.

    In case you want to deploy an issuer with local keys (i.e. not managed by Bloock services) you must set the following variables in order to create your issuer together with the API deployment:

    - **BLOOCK_ISSUER_KEY_KEY** (***REQUIRED***)
        - **Description**: Represents a private key of type [Baby JubJub](https://docs.iden3.io/getting-started/babyjubjub/).
        - **Purpose**: This private key will be used to create your issuer. In addition, for all operations where the issuer's signature is required, the same will be used to perform such operations.
        - **Required**: If you want to use your issuer locally, you only need to omit the `issuer_key` query when executing your requests.
        - **Example**: bf5e13dd8d9f784aee781b4de7836caa3499168514553eaa3d892911ad3c115t
    - **BLOOCK_ISSUER_PUBLISH_INTERVAL** (***REQUIRED***)
        - **Description**: This is the frequency at which the state of your local issuer will be transacted to blockchain.
        - **Purpose**: This variable will allow you to choose the time interval you want to spend to execute the transaction and the economic cost you want to assume.
        - **Options**: You must pass one of the following integers: 1, 5, 15 or 60. Representing every 1 minute, 5 minutes, 15 minutes or 60 minutes.
        - **Example**: 1
    - **BLOOCK_ISSUER_NAME** (***OPTIONAL***)
        - **Description**: The issuer name.
        - **Purpose**: Simply to identify your issuer by name.
        - **Example**: Test Issuer Name
    - **BLOOCK_ISSUER_DESCRIPTION** (***OPTIONAL***)
        - **Description**: The issuer description.
        - **Purpose**: Simply to add a description of you issuer.
        - **Example**: this is my first issuer creation
    - **BLOOCK_ISSUER_IMAGE** (***OPTIONAL***)
        - **Description**: You can set up an image for you issuer. You will see that image issuer on your [Bloock management dashboard](https://dashboard.bloock.com/login).
        - **Purpose**: You will have to pass an image in base64url to be able to decode it later.
        - **Example**: iVBORw0KGgoAAAANSUhEUgAAAQAAAAEAEAAAAAApiSv5AAAHQklEQVR4nOydQW7luA4Afz5y_yv3rCZ-C4IiTdrpQVWtGm1bUpKCQEgi9f3nz_8E...

    An issuer is ultimately an identity, so creating it means having a DID. There are different [DID methods](https://www.w3.org/TR/did-core/#methods), so you can specify any supported by Bloock:

    - **BLOOCK_ISSUER_DID_METADATA_METHOD** (***OPTIONAL***)
        - **Description**: The identity did method.
        - **Options**: polygonid, iden3
    - **BLOOCK_ISSUER_DID_METADATA_BLOCKCHAIN** (***OPTIONAL***)
        - **Description**: The identity did blockchain.
        - **Options**: polygon
    - **BLOOCK_ISSUER_DID_METADATA_NETWORK** (***OPTIONAL***)
        - **Description**: The identity did network reference.
        - **Options**: main, mumbai

    If you want to perform verification processes, and in case you want to verify proofs issued in a different network than the default one, you can change it by editing the following variables:

    > **NOTE:** For now, by default, all variables point to [Polygon's main network](https://polygonscan.com/).

    - **BLOOCK_BLOCKCHAIN_SMART_CONTRACT** (***OPTIONAL***)
        - **Description**: In case you want to point e.g. to another network like Mumbai (test network) you have to update the smart contract.
        - **Options**: Mumbai smart contract: 0x134B1BE34911E39A8397ec6289782989729807a4.
    - **BLOOCK_BLOCKCHAIN_PROVIDER** (***OPTIONAL***)
        - **Description**: The rpc provider uri endpoint.
        - **Example**: https://polygon-mumbai.g.alchemy.com/v2/xxxxxxxxxx
    - **BLOOCK_BLOCKCHAIN_RESOLVER_PREFIX** (***OPTIONAL***)
        - **Description**: The identity resolver prefix.
        - **Options**: Mumbai prefix: polygon:mumbai

    You can also edit parameters of your verification process:

    - **BLOOCK_VERIFICATION_EXPIRATION** (***OPTIONAL***)
        - **Description**: You can edit how long a verification is valid for (by specifying the number in minutes), i.e. when you start a verification process by default that session id that is created has an expiration after 60 minutes. You can add more time or reduce it. More features will be added soon.
        - **Default**: 60 minutes.
        - **Example**: 120

    These configuration variables provide fine-grained control over the behavior of the Identity Bloock Managed API. You can adjust them to match your specific requirements and deployment environment.

    ### Database Support

    The Identity Bloock Managed API is designed to be flexible when it comes to database integration. It supports three types of relational databases: **MemDB (SQLite)**, **MySQL**, and **Postgres**. The choice of database type depends on your specific requirements and infrastructure.

    Here are the supported database types and how to configure them:

    - **MySQL**: To connect to a MySQL database, you can use the following connection string format
       ````
       mysql://user:password@tcp(host:port)/database
       ````

    Replace `user`, `password`, `host`, `port`, and `database` with your MySQL database credentials and configuration. This format allows you to specify the MySQL database you want to connect to.

    - **Postgres**: For PostgreSQL database integration, use the following connection string format:

       ````
       postgres://user:password@host/database?sslmode=disable
       ````

    Similar to MySQL, replace `user`, `password`, `host`, and `database` with your PostgreSQL database details. Additionally, you can set the `sslmode` as needed. The `sslmode=disable` option is used in the example, but you can adjust it according to your PostgreSQL server's SSL requirements.

    - **MemDB (SQLite)**: The API also supports in-memory SQLite databases. To use SQLite, you can specify the connection string as follows:

       ````
       file:dbname?mode=memory&cache=shared&_fk=1
       ````

    In this format, `dbname` represents the name of your SQLite database. The API will create an in-memory SQLite database with this name.

    If you already have an existing database infrastructure and want to use it with the Identity Bloock Managed API, you have the flexibility to provide your custom database connection string.

    `Variable: BLOOCK_DB_CONNECTION_STRING`

    The API provides a configuration variable called `BLOOCK_DB_CONNECTION_STRING` that allows you to specify your own database connection string independently of the way you run the API. Whether you run the API as a Docker container or as a standalone application, you can always set this variable to point to your existing database server.
  contact:
    name: BLOOCK
    url: 'https://www.bloock.com/contact'
    email: support@bloock.com
  termsOfService: 'https://www.bloock.com/legal'
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/bloock/bloock-identity-managed-api/master/LICENSE'
servers:
  - url: 'https://identity-managed-api.bloock.com'
tags:
  - name: Credential
  - name: Issuer
  - name: Verification
paths:
  /v1/credentials:
    post:
      tags:
        - Credential
      summary: Create Credential
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  schema_id: QmVQeuTBX9bkzBTPwZK3NJQD8pkCp4AsMCTPgufnqUrS6X
                  holder_did: 'did:polygonid:polygon:mumbai:2qGg7TzmcoU4Jg3E86wXp4WJcyGUTuafPZxVRxpYQr'
                  credential_subject:
                    - key: birth_date
                      value: '1999-03-20'
                    - key: car_points
                      value: 5
                    - key: car_type
                      value: big
                    - key: is_spanish
                      value: true
                    - key: license_type
                      value: 922337203685477
                    - key: local_hour
                      value: '2023-08-29T12:24:14+00:00'
                    - key: nif
                      value: 566666666U
                    - key: precision_wheels
                      value: 1.2
                    - key: quantity_oil
                      value: 1.15555555555
                  expiration: 11724482542
                  version: 0
              required:
                - schema_id
                - holder_did
                - credential_subject
                - expiration
                - version
              properties:
                schema_id:
                  type: string
                  description: What is the schema id reference.
                holder_did:
                  type: string
                  description: Who is going to be the credential holder.
                credential_subject:
                  type: array
                  description: The credential attributes.
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: It must be the key associated to the attribute of your schema.
                      value:
                        type:
                          - integer
                          - number
                          - string
                          - boolean
                        description: The value of the attribute.
                expiration:
                  type: integer
                  description: 'The expiration must be in [unix timestamp](https://www.unixtimestamp.com/) format.'
                version:
                  type: integer
                  description: 'If you want to add a version to the credential, by default you can leave 0.'
            examples:
              Example 1:
                value:
                  schema_id: QmYfn6V528p9rXj1U2oXeMq7QxjDVnCp58WYxVLiqk8dZU
                  holder_did: 'did:polygonid:polygon:main:2q544HUegzeRpwr3V2qu9eMwgrAmF5x4E1NCPzbQc2'
                  credential_subject:
                    - key: nif
                      value: 11111111M
                  expiration: 1770381786
                  version: 0
      parameters:
        - name: issuer_key
          in: query
          schema:
            type: string
            example: 45f16e2c-085a-4bf9-ace1-71c30dee7ef3
          description: issuer managed key (UUID). Leave it empty if you want to use the issuer deployed locally.
          example: '1bf0c79e-55e6-4f14-aa9d-fb55619ba0cf '
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                x-examples:
                  Example 1:
                    id: 2775300b-1f8b-4955-88d5-e25f633304ed
              examples:
                Example 1:
                  value:
                    id: 5b65bb1c-635d-4b90-835d-994337d60246
      x-stoplight:
        id: hts2w9yp3au97
      operationId: post-v1-create-credential
      security:
        - {}
        - api-key: []
        - secret: []
      description: 'This endpoint will create a [Verifiable Credential 2.0](https://www.w3.org/TR/vc-data-model-2.0/#introduction).'
  '/v1/credentials/{id}':
    get:
      tags:
        - Credential
      summary: Get Credential By ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  '@context':
                    type: array
                    items:
                      type: string
                  type:
                    type: array
                    items:
                      type: string
                  expirationDate:
                    type: string
                  issuanceDate:
                    type: string
                  credentialSubject:
                    type: object
                    properties:
                      id:
                        type: string
                      nif:
                        type: string
                      type:
                        type: string
                  credentialStatus:
                    type: object
                    properties:
                      id:
                        type: string
                      revocationNonce:
                        type: integer
                      type:
                        type: string
                  issuer:
                    type: string
                  credentialSchema:
                    type: object
                    properties:
                      id:
                        type: string
                      type:
                        type: string
                  proof:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        issuerData:
                          type: object
                          properties:
                            id:
                              type: string
                            state:
                              type: object
                              properties:
                                claimsTreeRoot:
                                  type: string
                                value:
                                  type: string
                                txId:
                                  type: string
                                blockTimestamp:
                                  type: integer
                                blockNumber:
                                  type: integer
                                rootOfRoots:
                                  type: string
                                revocationTreeRoot:
                                  type: string
                            authCoreClaim:
                              type: string
                            mtp:
                              type: object
                              properties:
                                existence:
                                  type: boolean
                                siblings:
                                  type: array
                                  items:
                                    type: object
                                    properties: {}
                            credentialStatus:
                              type: object
                              properties:
                                id:
                                  type: string
                                revocationNonce:
                                  type: integer
                                type:
                                  type: string
                        coreClaim:
                          type: string
                        signature:
                          type: string
                        mtp:
                          type: object
                          properties:
                            existence:
                              type: boolean
                            siblings:
                              type: array
                              items:
                                type: string
                x-examples:
                  Example 1:
                    id: 'https://identity-managed-api.bloock.com/v1/credentials/5b65bb1c-635d-4b90-835d-994337d60246'
                    '@context':
                      - 'https://www.w3.org/2018/credentials/v1'
                      - 'https://schema.iden3.io/core/jsonld/iden3proofs.jsonld'
                      - 'https://api.bloock.com/hosting/v1/ipfs/QmaqBSGqL4mHwctEJffQE72gU653jQZAjciYjz5dJpXzs2'
                    type:
                      - VerifiableCredential
                      - TestBloock
                    expirationDate: '2026-02-06T12:43:06Z'
                    issuanceDate: '2024-02-06T12:51:45.801672167Z'
                    credentialSubject:
                      id: 'did:polygonid:polygon:main:2q544HUegzeRpwr3V2qu9eMwgrAmF5x4E1NCPzbQc2'
                      nif: 11111111M
                      type: TestBloock
                    credentialStatus:
                      id: 'https://api.bloock.com/identityV2/v1/did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J/claims/revocation/status/1035539101'
                      revocationNonce: 1035539101
                      type: SparseMerkleTreeProof
                    issuer: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                    credentialSchema:
                      id: 'https://api.bloock.com/hosting/v1/ipfs/QmYfn6V528p9rXj1U2oXeMq7QxjDVnCp58WYxVLiqk8dZU'
                      type: JsonSchema2023
                    proof:
                      - type: BJJSignature2021
                        issuerData:
                          id: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                          state:
                            claimsTreeRoot: f7c7866f370c49cac308415b3181bf4fa6912a9a20dfeb3be29a8176046d9105
                            value: 4be355aa1253b5f74f54e8f8f0336f34bf2bbb98694cc3f0e0ff8a67b1ca7322
                          authCoreClaim: cca3371a6cb1b715004407e325bd993c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000114bf6b442e5f28d313c4096675f2fccde737d56e85ec752f95cd61a20ce471ba591c9c94e465226dd5d91bd4347d887da3825069dc0181e8a43c0c33086902b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                          mtp:
                            existence: true
                            siblings: []
                          credentialStatus:
                            id: 'https://api.bloock.com/identityV2/v1/did%3Apolygonid%3Apolygon%3Amain%3A2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J/claims/revocation/status/0'
                            revocationNonce: 0
                            type: SparseMerkleTreeProof
                        coreClaim: da0499fb7ee27fce161edad10394ec0b2a00000000000000000000000000000002115caf312e33a0b0c82d57fdd240b7261d58901a346261c5ce5621136b0b00783e7cef5ec8699146748d94cb4c6f67cd292a8952410e6de0ecb4a42b449a0d00000000000000000000000000000000000000000000000000000000000000009d12b93d00000000dae185690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                        signature: 6545a849172596d192b76284c7f8e5be620b1468a61132dd9acc18b30b2057a26ef3eb582ece08a6462318ef4b62b3ca9649be8248ba0dcce977f46b88a17903
                      - type: Iden3SparseMerkleTreeProof
                        issuerData:
                          id: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                          state:
                            txId: '0x2ff0c81ae6a820fc40753dcdd68b524a457b4169898f60925da8ba681fd2d921'
                            blockTimestamp: 1707223941
                            blockNumber: 53192895
                            rootOfRoots: c50c6ee8b3898ded0d8917be8980a298c4d51111cf999e7e03c4525c827acf21
                            claimsTreeRoot: 625b1191a6c69aa7bca2f338495910275b3532246cb2fb930a94e33058740630
                            revocationTreeRoot: '0000000000000000000000000000000000000000000000000000000000000000'
                            value: 70180c4eb23caafa4a218a09e10063f887cd3fb433a77f5270a5059cc534dd27
                        coreClaim: da0499fb7ee27fce161edad10394ec0b2a00000000000000000000000000000002115caf312e33a0b0c82d57fdd240b7261d58901a346261c5ce5621136b0b00783e7cef5ec8699146748d94cb4c6f67cd292a8952410e6de0ecb4a42b449a0d00000000000000000000000000000000000000000000000000000000000000009d12b93d00000000dae185690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                        mtp:
                          existence: true
                          siblings:
                            - '4968344917409825039254187535038159752813997896244692801621766268045072754222'
                            - '0'
                            - '12632645952375144709886747358312729637396287606109672954060317972791062911446'
              examples:
                Example 1:
                  value:
                    id: 'https://identity-managed-api.bloock.com/v1/credentials/5b65bb1c-635d-4b90-835d-994337d60246'
                    '@context':
                      - 'https://www.w3.org/2018/credentials/v1'
                      - 'https://schema.iden3.io/core/jsonld/iden3proofs.jsonld'
                      - 'https://api.bloock.com/hosting/v1/ipfs/QmaqBSGqL4mHwctEJffQE72gU653jQZAjciYjz5dJpXzs2'
                    type:
                      - VerifiableCredential
                      - TestBloock
                    expirationDate: '2026-02-06T12:43:06Z'
                    issuanceDate: '2024-02-06T12:51:45.801672167Z'
                    credentialSubject:
                      id: 'did:polygonid:polygon:main:2q544HUegzeRpwr3V2qu9eMwgrAmF5x4E1NCPzbQc2'
                      nif: 11111111M
                      type: TestBloock
                    credentialStatus:
                      id: 'https://api.bloock.com/identityV2/v1/did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J/claims/revocation/status/1035539101'
                      revocationNonce: 1035539101
                      type: SparseMerkleTreeProof
                    issuer: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                    credentialSchema:
                      id: 'https://api.bloock.com/hosting/v1/ipfs/QmYfn6V528p9rXj1U2oXeMq7QxjDVnCp58WYxVLiqk8dZU'
                      type: JsonSchema2023
                    proof:
                      - type: BJJSignature2021
                        issuerData:
                          id: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                          state:
                            claimsTreeRoot: f7c7866f370c49cac308415b3181bf4fa6912a9a20dfeb3be29a8176046d9105
                            value: 4be355aa1253b5f74f54e8f8f0336f34bf2bbb98694cc3f0e0ff8a67b1ca7322
                          authCoreClaim: cca3371a6cb1b715004407e325bd993c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000114bf6b442e5f28d313c4096675f2fccde737d56e85ec752f95cd61a20ce471ba591c9c94e465226dd5d91bd4347d887da3825069dc0181e8a43c0c33086902b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                          mtp:
                            existence: true
                            siblings: []
                          credentialStatus:
                            id: 'https://api.bloock.com/identityV2/v1/did%3Apolygonid%3Apolygon%3Amain%3A2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J/claims/revocation/status/0'
                            revocationNonce: 0
                            type: SparseMerkleTreeProof
                        coreClaim: da0499fb7ee27fce161edad10394ec0b2a00000000000000000000000000000002115caf312e33a0b0c82d57fdd240b7261d58901a346261c5ce5621136b0b00783e7cef5ec8699146748d94cb4c6f67cd292a8952410e6de0ecb4a42b449a0d00000000000000000000000000000000000000000000000000000000000000009d12b93d00000000dae185690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                        signature: 6545a849172596d192b76284c7f8e5be620b1468a61132dd9acc18b30b2057a26ef3eb582ece08a6462318ef4b62b3ca9649be8248ba0dcce977f46b88a17903
                      - type: Iden3SparseMerkleTreeProof
                        issuerData:
                          id: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                          state:
                            txId: '0x2ff0c81ae6a820fc40753dcdd68b524a457b4169898f60925da8ba681fd2d921'
                            blockTimestamp: 1707223941
                            blockNumber: 53192895
                            rootOfRoots: c50c6ee8b3898ded0d8917be8980a298c4d51111cf999e7e03c4525c827acf21
                            claimsTreeRoot: 625b1191a6c69aa7bca2f338495910275b3532246cb2fb930a94e33058740630
                            revocationTreeRoot: '0000000000000000000000000000000000000000000000000000000000000000'
                            value: 70180c4eb23caafa4a218a09e10063f887cd3fb433a77f5270a5059cc534dd27
                        coreClaim: da0499fb7ee27fce161edad10394ec0b2a00000000000000000000000000000002115caf312e33a0b0c82d57fdd240b7261d58901a346261c5ce5621136b0b00783e7cef5ec8699146748d94cb4c6f67cd292a8952410e6de0ecb4a42b449a0d00000000000000000000000000000000000000000000000000000000000000009d12b93d00000000dae185690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                        mtp:
                          existence: true
                          siblings:
                            - '4968344917409825039254187535038159752813997896244692801621766268045072754222'
                            - '0'
                            - '12632645952375144709886747358312729637396287606109672954060317972791062911446'
      x-stoplight:
        id: f3smhfwqiahd2
      operationId: get-v1-credential-by-id
      description: 'This endpoint will retrieve a [Verifiable Credential 2.0](https://www.w3.org/TR/vc-data-model-2.0/#introduction).'
  '/v1/credentials/{id}/offer':
    get:
      tags:
        - Credential
      summary: Get Credential Offer
      parameters:
        - name: issuer_key
          in: query
          schema:
            type: string
            example: 45f16e2c-085a-4bf9-ace1-71c30dee7ef3
          description: issuer managed key (UUID). Leave it empty if you want to use the issuer deployed locally.
          example: '1bf0c79e-55e6-4f14-aa9d-fb55619ba0cf '
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  thid:
                    type: string
                  body:
                    type: object
                    properties:
                      url:
                        type: string
                      credentials:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            description:
                              type: string
                  from:
                    type: string
                  to:
                    type: string
                  typ:
                    type: string
                  type:
                    type: string
                x-examples:
                  Example 1:
                    id: d8d05df3-c4ef-11ee-867f-a2501f0e3e5f
                    thid: d8d05df3-c4ef-11ee-867f-a2501f0e3e5f
                    body:
                      url: 'https://identity-managed-api.bloock.com/v1/credentials/redeem?thread_id=d8d05df3-c4ef-11ee-867f-a2501f0e3e5f'
                      credentials:
                        - id: 5b65bb1c-635d-4b90-835d-994337d60246
                          description: TestBloock
                    from: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                    to: 'did:polygonid:polygon:main:2q544HUegzeRpwr3V2qu9eMwgrAmF5x4E1NCPzbQc2'
                    typ: application/iden3comm-plain-json
                    type: 'https://iden3-communication.io/credentials/1.0/offer'
              examples:
                Example 1:
                  value:
                    id: d8d05df3-c4ef-11ee-867f-a2501f0e3e5f
                    thid: d8d05df3-c4ef-11ee-867f-a2501f0e3e5f
                    body:
                      url: 'https://identity-managed-api.bloock.com/v1/credentials/redeem?thread_id=d8d05df3-c4ef-11ee-867f-a2501f0e3e5f'
                      credentials:
                        - id: 5b65bb1c-635d-4b90-835d-994337d60246
                          description: TestBloock
                    from: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
                    to: 'did:polygonid:polygon:main:2q544HUegzeRpwr3V2qu9eMwgrAmF5x4E1NCPzbQc2'
                    typ: application/iden3comm-plain-json
                    type: 'https://iden3-communication.io/credentials/1.0/offer'
      x-stoplight:
        id: wfd8zsqcv05z7
      operationId: get-v1-credential-offer
      description: 'This endpoint will offer a [Verifiable Credential 2.0](https://www.w3.org/TR/vc-data-model-2.0/#introduction) to a holder. For now, it is only compatible with the [PolygonID wallet](https://play.google.com/store/apps/details?id=com.polygonid.wallet&hl=en_US&pli=1).'
      security:
        - {}
        - api-key: []
        - secret: []
  '/v1/credentials/{id}/revocation':
    put:
      tags:
        - Credential
      summary: Revoke Credential
      requestBody:
        content: {}
      parameters:
        - name: issuer_key
          in: query
          schema:
            type: string
            example: 45f16e2c-085a-4bf9-ace1-71c30dee7ef3
          description: issuer managed key (UUID). Leave it empty if you want to use the issuer deployed locally.
          example: '1bf0c79e-55e6-4f14-aa9d-fb55619ba0cf '
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                x-examples:
                  Example 1:
                    success: true
              examples:
                Example 1:
                  value:
                    success: true
      x-stoplight:
        id: cw4n9sfyztsyp
      operationId: put-v1-revoke-credential
      description: 'This endpoint will revoke a [Verifiable Credential 2.0](https://www.w3.org/TR/vc-data-model-2.0/#introduction). The revocation process will be effective when the issuer has transacted its status again, at which time it will be registered in the blockchain that the credential has been revoked.'
      security:
        - {}
        - api-key: []
        - secret: []
  /v1/issuers/state/publish:
    post:
      tags:
        - Issuer
      summary: Publish Issuer State
      requestBody:
        content: {}
      parameters:
        - name: issuer_key
          in: query
          schema:
            type: string
            example: 45f16e2c-085a-4bf9-ace1-71c30dee7ef3
          description: issuer managed key (UUID). Leave it empty if you want to use the issuer deployed locally.
          example: '1bf0c79e-55e6-4f14-aa9d-fb55619ba0cf '
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    tx_hash: '0x2ff0c81ae6a820fc40753dcdd68b524a457b4169898f60925da8ba681fd2d921'
                properties:
                  tx_hash:
                    type: string
                    description: 'You can check this transaction hash on [Polygon PoS explorer](https://polygonscan.com/)'
              examples:
                Example 1:
                  value:
                    tx_hash: '0x2ff0c81ae6a820fc40753dcdd68b524a457b4169898f60925da8ba681fd2d921'
      x-stoplight:
        id: 6pbnynar8twd2
      operationId: post-v1-publish-issuer-state
      description: This endpoint will allow you to make a state transition to your issuer. It is important that you execute these transitions so that your credentials can have more evidence and proof to be verified.
      security:
        - {}
        - api-key: []
        - secret: []
  /v1/issuers:
    get:
      tags:
        - Issuer
      summary: Get Issuer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  did:
                    type: string
                x-examples:
                  Example 1:
                    did: ''
              examples:
                Example 1:
                  value:
                    did: ''
      x-stoplight:
        id: b81rgd7n0rafg
      operationId: get-v1-issuer
      description: Retrieves the issuer DID. **This endpoint will only respond with the DID if an issuer has been generated locally.**
    post:
      tags:
        - Issuer
      summary: Create Issuer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - key
                - publish_interval
              properties:
                key:
                  type: string
                  example: '1bf0c79e-55e6-4f14-aa9d-fb55619ba0cf '
                  description: 'Issuer Baby JubJub(BJJ) managed key (UUID). '
                name:
                  type: string
                  description: Name of the issuer.
                description:
                  type: string
                  description: Description of the issuer
                image:
                  type: string
                  format: binary
                  description: Image metadata.
                publish_interval:
                  type: string
                  description: 'This is the frequency at which the state of your issuer will be transacted to blockchain. You must pass one of the following values: 1, 5, 15 or 60. Representing every 1 minute, 5 minutes, 15 minutes or 60 minutes.'
            examples:
              Example 1:
                value:
                  key: 45f16e2c-085a-4bf9-ace1-71c30dee7ef3
                  name: Bloock Issuer Test
                  description: bloock issuer test for description
                  image: iVBORw0KGgoAAAANSUhEUgAAAQAAAAEAEAAAAAApiSv5AAAHQklEQVR4nOydQW7luA4Afz5y_yv3rCZ-C4IiTdrpQVWtGm1bUpKCQEgi9f3nz_8E...
                  publish_interval: 60
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  did:
                    type: string
                x-examples:
                  Example 1:
                    did: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
              examples:
                Example 1:
                  value:
                    did: 'did:polygonid:polygon:main:2q4eRtLPb4KzZDGEcFRKeD9n21fRcpRyDK2jrkun2J'
      x-stoplight:
        id: 93m3ha9knchct
      operationId: post-v1-create-issuer
      description: 'This endpoint generates a new issuer, thus creating a new [DID](https://www.w3.org/TR/did-core/).'
      security:
        - {}
        - api-key: []
        - secret: []
      x-internal: true
  /v1/verifications:
    post:
      tags:
        - Verification
      summary: Create Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  circuitId: credentialAtomicQuerySigV2
                  id: 1704192771
                  query:
                    allowedIssuers:
                      - '*'
                    context: 'https://api.bloock.dev/hosting/v1/ipfs/QmNYkCi1WNFE9G6LxtbSTRRSbyWuYqBNE6aYq3MwivyHfp'
                    credentialSubject:
                      birth_date: {}
                    type: DrivingLicense
              required:
                - circuitId
                - id
                - query
              properties:
                circuitId:
                  type: string
                  description: The circuit proof it's going to validate.
                id:
                  type: integer
                  description: Random id generated.
                query:
                  type: object
                  required:
                    - allowedIssuers
                    - context
                    - credentialSubject
                    - type
                  properties:
                    allowedIssuers:
                      type: array
                      description: List of valid issuers. Use * to accept all.
                      items:
                        type: string
                    context:
                      type: string
                      description: URL with the schema id it's going to be validated.
                    credentialSubject:
                      type: object
                    type:
                      type: string
                      description: Is the schema type name.
            examples:
              Example 1:
                value:
                  circuitId: credentialAtomicQuerySigV2
                  id: 1704192771
                  query:
                    allowedIssuers:
                      - '*'
                    context: 'https://api.bloock.com/hosting/v1/ipfs/QmaqBSGqL4mHwctEJffQE72gU653jQZAjciYjz5dJpXzs2'
                    credentialSubject:
                      nif: {}
                    type: TestBloock
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  typ:
                    type: string
                  type:
                    type: string
                  thid:
                    type: string
                  body:
                    type: object
                    properties:
                      callbackUrl:
                        type: string
                      reason:
                        type: string
                      scope:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            circuitId:
                              type: string
                            query:
                              type: object
                              properties:
                                allowedIssuers:
                                  type: array
                                  items:
                                    type: string
                                context:
                                  type: string
                                credentialSubject:
                                  type: object
                                  properties:
                                    nif:
                                      type: object
                                      properties: {}
                                type:
                                  type: string
                  from:
                    type: string
                x-examples:
                  Example 1:
                    id: dd436c69-7856-4e28-ae3f-4273275c559a
                    typ: application/iden3comm-plain-json
                    type: 'https://iden3-communication.io/authorization/1.0/request'
                    thid: dd436c69-7856-4e28-ae3f-4273275c559a
                    body:
                      callbackUrl: 'https://identity-managed-api.bloock.com/v1/verifications/callback?sessionId=2323706821'
                      reason: verification request
                      scope:
                        - id: 1704192771
                          circuitId: credentialAtomicQuerySigV2
                          query:
                            allowedIssuers:
                              - '*'
                            context: 'https://api.bloock.com/hosting/v1/ipfs/QmaqBSGqL4mHwctEJffQE72gU653jQZAjciYjz5dJpXzs2'
                            credentialSubject:
                              nif: {}
                            type: TestBloock
                    from: 'did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp'
              examples:
                Example 1:
                  value:
                    id: dd436c69-7856-4e28-ae3f-4273275c559a
                    typ: application/iden3comm-plain-json
                    type: 'https://iden3-communication.io/authorization/1.0/request'
                    thid: dd436c69-7856-4e28-ae3f-4273275c559a
                    body:
                      callbackUrl: 'https://identity-managed-api.bloock.com/v1/verifications/callback?sessionId=2323706821'
                      reason: verification request
                      scope:
                        - id: 1704192771
                          circuitId: credentialAtomicQuerySigV2
                          query:
                            allowedIssuers:
                              - '*'
                            context: 'https://api.bloock.com/hosting/v1/ipfs/QmaqBSGqL4mHwctEJffQE72gU653jQZAjciYjz5dJpXzs2'
                            credentialSubject:
                              nif: {}
                            type: TestBloock
                    from: 'did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp'
      x-stoplight:
        id: lwxnvudhugjdg
      operationId: post-v1-create-verification
      description: |-
        This endpoint is used to initiate a verification process. Please note that in order to perform the process you must first define a verification query with your [management dashboard](https://dashboard.bloock.com/products/identity):
        1. Go to the Digital Identity product
        2. Click on Validation Queries
        3. Create Query button
        4. Fill the form. (Here you will choose the schema you want to verify, the attributes, the type of proof...).
        5. When the query it's created, download the JSON query proof, by clicking **Download**.
        6. Copy the raw JSON as the input request.

        If you want you can use other open source compatible tools to obtain this JSON query like [Polygon Query Builder](https://schema-builder-test.polygonid.me/query-builder).

        **The response json from this endpoint can be converted directly to QR code so that it can be scanned by the user who is being verified.**
      security:
        - {}
        - api-key: []
        - secret: []
  /v1/verification/status:
    get:
      tags:
        - Verification
      summary: Get Verification Status
      parameters:
        - name: session_id
          in: query
          schema:
            type: integer
            example: 2323706821
          description: session id generated by the Create Verification endpoint.
          example: '123456'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                x-examples:
                  Example 1:
                    success: true
              examples:
                Example 1:
                  value:
                    success: true
      x-stoplight:
        id: x8blbyky27oy1
      operationId: get-v1-verification-status
      description: 'This endpoint returns whether the session id (e.g 2323706821) created in the **Create Verification** endpoint is valid or not. If it returns `true` it means that the user has been successfully verified, while if it returns `false` the verification has failed.'
x-internal: false
components:
  securitySchemes:
    api-key:
      name: API Key
      type: apiKey
      in: header
      description: 'Optionaly, you can use the X-API-KEY header to override the API Key that will be used for this specific request.'
    secret:
      type: http
      scheme: bearer
      description: 'If enabled, requests must be authenticated using the secret defined in the Configuration.'
