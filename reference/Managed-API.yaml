openapi: 3.1.0
x-stoplight:
  id: eifel450z45ts
info:
  title: Managed API
  version: 1.x
  summary: BLOOCK's Managed API
  description: |-
    The BLOOCK Managed API is a tool to integrate [BLOOCK](https://bloock.com)'s services using an API instead of our SDKs by taking care of all the integration logic:

    ---

    ## Table of Contents

    - [Installation](#installation)
      - [Docker Setup Guide](#docker-setup-guide)
        - [Option 1: Pull and Run the Docker Image](#option-1-pull-and-run-the-docker-image)
        - [Option 2: Use Docker Compose with Database Containers](#option-2-use-docker-compose-with-database-containers)
      - [Standalone Setup](#standalone-setup)
        - [Option 3: Clone the GitHub Repository](#option-3-clone-the-github-repository)
    - [Configuration](#configuration)
      - [Variables](#variables)
    - [Database Support](#database-support)
    - [Documentation](#documentation)
    - [License](#license)

    ---

    ## Installation

    You have two primary methods to set up and run the Bloock Managed API:

    1. [Docker Setup Guide](#docker-setup-guide)
    2. [Standalone Setup](#standalone-setup)

    Each method has its advantages and use cases.

    ### Docker Setup Guide

    Docker offers a convenient way to package and distribute the API, along with its required dependencies, in a self-contained environment. It's an excellent choice if you want a quick and hassle-free setup, or if you prefer isolation between your application and the host system.

    ### Option 1: Pull and Run the Docker Image

    This option is straightforward and ideal if you want to get started quickly. Follow these steps:

    1. **Pull the Docker Image:**

       - Open your terminal or command prompt.

       - Run the following command to pull the Docker image from [DockerHub](https://hub.docker.com/repository/docker/bloock/managed-api/general):

         ```bash
         docker pull bloock/managed-api
         ```

         This command fetches the latest version of the Bloock Managed API image from [DockerHub](https://hub.docker.com/repository/docker/bloock/managed-api/general). We maintain a Docker repository with the latest releases of this repository.

    2. **Create a `.env` File:**

       - In your project directory, create a `.env` file. You can use a text editor of your choice to create this file.

       - This file will contain the configuration for the API, including environment variables. Refer to the [Variables](#variables) section for a list of environment variables and their descriptions.

       - In the `.env` file, define the environment variables you want to configure for the API. Each environment variable should be set in the following format:

         ```txt
         VARIABLE_NAME=VALUE
         ```

       - Here's an example of what your `.env` file might look like:

         ```txt
         BLOOCK_DB_CONNECTION_STRING=file:bloock?mode=memory&cache=shared&_fk=1
         BLOOCK_BLOOCK_API_KEY=your_api_key
         BLOOCK_BLOOCK_WEBHOOK_SECRET_KEY=your_webhook_secret_key
         BLOOCK_WEBHOOK_CLIENT_ENDPOINT_URL=https://bloock.com/endpoint/to/send/file
         ```

         > **NOTE:** For the **BLOOCK_DB_CONNECTION_STRING** environment variable, you have the flexibility to specify your own MySQL or PostgreSQL infrastructure. Clients can provide their connection string for their database infrastructure. See the [Database](#database-support) section for available connections.

    3. **Run the Docker Image with Environment Variables:**

       - Run the following command to start the Bloock Managed API container while passing the `.env` file as an environment variable source:

       ```bash
       docker run --env-file .env -p 8080:8080 bloock/managed-api
       ```

       - This command maps the `.env` file into the container, ensuring that the API reads its configuration from the file. Viper automatically read these environment variables and make them accessible to the code.

       - By default, the above command runs the Docker container in the foreground, displaying API logs and output in your terminal. You can interact with the API while it's running.

         3.1. **Running Docker in the Background (Daemon Mode)**

       - Append the `-d` flag to the docker run command as follows:

       ```bash
       docker run -d --env-file config.txt -p 8080:8080 bloock/managed-api
       ```

       The `-d` flag tells Docker to run the container as a background process. You can continue using your terminal for other tasks while the Bloock Managed API container runs silently in the background.

    4. **Access the API:**

       - After running the Docker image, the Bloock Managed API will be accessible at `http://localhost:8080`.

       - You can now make API requests to interact with the service.

    By following these steps, you can quickly deploy the Bloock Managed API as a Docker container with your customized configuration.

    ### Option 2: Use Docker Compose with Database Containers

    If you need a more complex setup, such as using a specific database like **MySQL**, **Postgres** or **MemDB**, Docker Compose is your choice. Follow these steps:

    1. **Choose the Docker Compose File:**

       - In our [repository](https://github.com/bloock/bloock-managed-api), you will find Docker Compose files for different database types:

         - `docker-compose-mysql.yaml` for MySQL
         - `docker-compose-postgres.yaml` for PostgreSQL
         - `docker-compose.yaml for MemDB` (SQLite)

    2. **Copy the Chosen Docker Compose File:**

       - Choose the Docker Compose file that corresponds to the database type you want to use. For example, if you prefer MySQL, copy `docker-compose-mysql.yaml`.

    3. **Configure Environment Variables:**

       - Open the Docker Compose file in a text editor. Inside the file, locate the environment section for the api service. Here, you can specify environment variables that configure the API.

       - Refer to the [Variables](#variables) section for a list of environment variables and their descriptions.

    4. **Set Environment Variables:**

       - In the `environment` section, you can set environment variables in the following format:

         ```yaml
         VARIABLE_NAME: "VALUE"
         ```

       - Here's an example of what your `environment` section might look like:

         ```yaml
         BLOOCK_DB_CONNECTION_STRING: "file:bloock?mode=memory&cache=shared&_fk=1"
         BLOOCK_BLOOCK_API_KEY: "your_api_key"
         BLOOCK_BLOOCK_WEBHOOK_SECRET_KEY: "your_webhook_secret_key"
         BLOOCK_WEBHOOK_CLIENT_ENDPOINT_URL: "https://bloock.com/endpoint/to/send/file"
         ```

    5. **Run Docker Compose:**

       - Open your terminal, navigate to the directory where you saved the Docker Compose file, and run the following command:

       ```bash
        docker-compose -f docker-compose-mysql.yaml up
       ```

       Replace `docker-compose-mysql.yaml` with the name of the Docker Compose file you selected.

       5.1. **Running Docker in the Background (Daemon Mode)**

       - Append the `-d` flag to the docker run command as follows:

       ```bash
       docker-compose -f docker-compose-mysql.yaml up -d
       ```

       The `-d` flag tells Docker to run the container as a background process. You can continue using your terminal for other tasks while the Bloock Managed API container runs silently in the background.

    6. **Access the API:**

       - After running the Docker Compose command, the Bloock Managed API will be accessible at http://localhost:8080. You can make API requests to interact with the service.

    By following these steps, you can quickly set up the Bloock Managed API with your chosen database type using the provided Docker Compose files.

    ### Standalone Setup

    Running the API as a standalone application provides more control and flexibility, allowing you to customize and integrate it into your specific environment. Choose this option if you have specific requirements or if you want to modify the API's source code.

    ### Option 3: Clone the GitHub Repository

    You can also run this service as a common Golang binary if you need it.

    #### Standalone Requirements

    - Makefile toolchain
    - Unix-based operating system (e.g. Debian, Arch, Mac OS X)
    - [Go](https://go.dev/) 1.20

    To deploy the API as a standalone application, follow these steps:

    1. **Clone the Repository or Download the Latest Release:**

       1.1. **Clone the Repository:**

       - Open your terminal and navigate to the directory where you want to clone the [repository](https://github.com/bloock/bloock-identity-managed-api).

       - Run the following command to clone the [repository](https://github.com/bloock/bloock-identity-managed-api):

       ```bash
        git clone https://github.com/bloock/managed-api.git
       ```

       Instead of cloning the repository, it's recommended to download the latest release to ensure you have the most stable and up-to-date version of the Bloock Managed API.

       1.2 **Download the Latest Release:**

       - Visit the [repository's releases page](https://github.com/bloock/bloock-managed-api/releases) on GitHub.

       - Look for the latest release version and select it.

       - Under the Assets section, you will find downloadable files. Choose the appropriate file for your operating system (e.g., Windows, macOS, Linux).

       - Download the selected release file to your local machine.

         1. **Navigate to the Repository:**

            - Change your current directory to the cloned repository or downloaded the release file:

            ```bash
             cd managed-api
            ```

            1. **Set Up Configuration:**

               - Inside the repository, you'll find a `config.yaml` file.

               - Open `config.yaml` in a text editor and configure the environment variables as needed, following the format described in the [Variables](#variables) section. For example:

               ```yaml
               api: 
                host: "0.0.0.0"
                port: 8080
                debug_mode: false
        
               db:
                connection_string: "file:bloock?mode=memory&cache=shared&_fk=1"
               
               auth:
                secret: ""
        
               bloock:
                api_host: ""
                api_key: ""
                cdn_host: ""
                webhook_secret_key: ""
        
               webhook:
                client_endpoint_url: ""
                max_retries: 
        
               authenticity:
                key:
                 key_type: ""
                 key: ""
                certificate:
                 pkcs12_path: "./"
                 pkcs12_password: ""
        
               encryption:
                 key:
                   key_type: ""
                   key: ""
                 certificate:
                   pkcs12_path: "./"
                   pkcs12_password: ""
               
               integrity:
                  aggregate_mode: false
                  aggregate_worker: false
                  aggregate_interval:
        
               storage:
                 tmp_dir: "./tmp"
                 local_strategy: "FILENAME"
                 local_path: "./data"
               ```

               > **NOTE:** Here you will not have to use the `VARIABLE: value` nomenclature, but you will simply have to fill in the variables you need directly, respecting the format already established.

    2. **Run the Application:**

       - To run the application, execute the following command:

       ```bash
        go run cmd/main.go
       ```

       This command will start the Bloock Managed API as a standalone application, and it will use the configuration provided in the config.yaml file.

    3. **Access the API:**

       - After running the application, the Bloock Managed API will be accessible at http://localhost:8080. You can make API requests to interact with the service.

    ---

    ## Configuration

    The Bloock Managed API leverages Viper, a powerful configuration management library, currently supporting environment variables and a YAML configuration file.

    ### Variables

    Here are the configuration variables used by the Bloock Managed API:

    - **BLOOCK_BLOOCK_API_KEY** (**_OPTIONAL_**)
      - **Description**: Your unique [BLOOCK API key](https://docs.bloock.com/libraries/authentication/create-an-api-key).
      - **Purpose**: This [API key](https://docs.bloock.com/libraries/authentication/create-an-api-key) is required for authentication and authorization when interacting with the Bloock Identity Managed API. It allows you to securely access and use the API's features.
      - **[Create API Key](https://docs.bloock.com/libraries/authentication/create-an-api-key)**
      - **Required**: **If you don't add the API KEY here, you must add it every time you execute a request to the API.**
      - **Example**: no9rLf9dOMjXGvXQX3I96a39qYFoZknGd6YHtY3x1VPelr6M-TmTLpAF-fm1k9Zi
    - **BLOOCK_DB_CONNECTION_STRING** (**_OPTIONAL_**)
      - **Description**: Your custom database connection URL.
      - **Default**: "file:bloock?mode=memory&cache=shared&\_fk=1"
      - **Purpose**: This variable allows you to specify your own [database](#database-support) connection string. You can use it to connect the API to your existing database infrastructure. The format depends on the [database](#database-support) type you choose.
      - **Required**: When docker database container or your existing database infrastructure provided.
    - **BLOOCK_BLOOCK_WEBHOOK_SECRET_KEY** (**_OPTIONAL_**)
      - **Description**: Your [BLOOCK webhook secret key](https://docs.bloock.com/webhooks/overview).
      - **Purpose**: The [webhook secret key](https://docs.bloock.com/webhooks/overview) is used to secure and verify incoming webhook requests. It ensures that webhook data is received from a trusted source and has not been tampered with during transmission.
      - **Required**: When you want to certificate data using integrity Bloock product.
      - **[Create webhook](https://docs.bloock.com/webhooks/overview)**
      - **Example**: ew1b2d5qf7WeUOPy1u1CW6FXro6j5plS
    - **BLOOCK_WEBHOOK_CLIENT_ENDPOINT_URL** (**_OPTIONAL_**)
      - **Description**: An endpoint URL where you want to send processed files.
      - **Purpose**: This URL specifies the destination where processed files will be sent after successful verification. It can be configured to integrate with other systems or services that require the processed data.
      - **Example**: https://bloock.com/endpoint/to/send/file
    - **BLOOCK_WEBHOOK_MAX_RETRIES** (**_OPTIONAL_**)
      - **Description**: Number of times it will try to send your processed files.
      - **Purpose**: The idea is that in case the request to your set endpoint fails, the API will try to send you that file again with an exponential backoff mechanism. These algorithms allow you to define how many times you want it to try to send you the file.
      - **Example**: 3
    - **BLOOCK_AUTH_SECRET** (***OPTIONAL***)
      - **Description**: If you want to add control in your API calls with Bearer Token you can add a secret here. A Bearer token is a type of token used for authentication and authorization and is used in web applications and APIs to hold user credentials and indicate authorization for requests and access.
      - **Purpose**: The idea is that you can set a secret, which will be the same that you will have to pass in the headers of your requests in order to validate yourself.
      - **Example**: 0tEStdP(dg5=VU4iX4+7}e((HVd^ShVm
    - **BLOOCK_API_HOST** (**_OPTIONAL_**)
      - **Description**: The API host IP address.
      - **Default**: 0.0.0.0
      - **Purpose**: This variable allows you to specify the IP address on which the Bloock Managed API should listen for incoming requests. You can customize it based on your network configuration.
    - **BLOOCK_API_PORT** (**_OPTIONAL_**)
      - **Description**: The API port number.
      - **Default**: 8080
      - **Purpose**: The API listens on this port for incoming HTTP requests. You can adjust it to match your preferred port configuration.
    - **BLOOCK_API_DEBUG_MODE** (**_OPTIONAL_**)
      - **Description**: Enable or disable debug mode.
      - **Default**: false
      - **Purpose**: When set to true, debug mode provides more detailed log information, which can be useful for troubleshooting and debugging. Set it to false for normal operation.

    If you do not want to use Bloock's managed key service and use your own keys locally, then you must fill in these variables in order to perform authenticity or encryption on your files:

    - **BLOOCK_AUTHENTICITY_KEY_KEY** (**_OPTIONAL_**)
      - **Description**: Private key for signing data.
      - **Purpose**: If you want to sign data using your own local private key, you can specify it here. This private key is used for cryptographic operations to ensure data integrity and authenticity.
      - **Example**: bf5e13dd8d9f784aee781b4de7836caa3499168514553eaa3d892911ad3c115t
    - **BLOOCK_AUTHENTICITY_KEY_KEY_TYPE** (**_OPTIONAL_**)
      - **Description**: Type of key.
      - **Purpose**: This key type is utilized for cryptographic signing processes.
      - **Options**: EcP256k, Rsa2048, Rsa3072, Rsa4096.
    - **BLOOCK_AUTHENTICITY_CERTIFICATE_PKCS12_PATH** (**_OPTIONAL_**)
      - **Description**: Certificate for signing data.
      - **Purpose**: In case you want to upload a digital certificate in pkcs12 (`.pfx, .p12`) format, you can specify the url where it is to be processed.
      - **Example**: ./my_cert.p12
    - **BLOOCK_AUTHENTICITY_CERTIFICATE_PKCS12_PASSWORD** (**_OPTIONAL_**)
      - **Description**: Certificate password.
      - **Purpose**: If the certificate is protected by a password, you must provide it.
    - **BLOOCK_ENCRYPTION_KEY_KEY** (**_OPTIONAL_**)
      - **Description**: Private key for encrypting data.
      - **Purpose**: If you want to encrypt data using your own local key, you can specify it here.
      - **Example**: bf5e13dd8d9f784aee781b4de7836caa3499168514553eaa3d892911ad3c115t
    - **BLOOCK_ENCRYPTION_KEY_KEY_TYPE** (**_OPTIONAL_**)
      - **Description**: Type of key.
      - **Purpose**: This key type is utilized for cryptographic signing processes.
      - **Options**: Rsa2048, Rsa3072, Rsa4096.
    - **BLOOCK_ENCRYPTION_CERTIFICATE_PKCS12_PATH** (**_OPTIONAL_**)
      - **Description**: Certificate for encrypting data.
      - **Purpose**: In case you want to upload a digital certificate in pkcs12 (`.pfx, .p12`) format, you can specify the url where it is to be processed.
      - **Example**: ./my_cert.p12
    - **BLOOCK_ENCRYPTION_CERTIFICATE_PKCS12_PASSWORD** (**_OPTIONAL_**)
      - **Description**: Certificate password.
      - **Purpose**: If the certificate is protected by a password, you must provide it.

    As an advanced configuration option, users have the ability to enable the aggregator mode. Prior to enabling this feature, it is strongly advised to refer to the accompanying documentation for a comprehensive understanding of its functionality and implications. Once acquainted with the documentation, users can activate the aggregator mode by adjusting the specified variables as follows:

    - **BLOOCK_INTEGRITY_AGGREGATE_MODE** (**_OPTIONAL_**)
      - **Description**: Flag to enable the aggregator mode.
      - **Default**: false
      - **Purpose**: The process to certify a file will be changed with the aggregate feature. Basically will allow you to scale up and optimize your certifications.
    - **BLOOCK_INTEGRITY_AGGREGATE_WORKER** (**_OPTIONAL_**)
      - **Description**: Flag to enable the aggregator worker.
      - **Default**: false
      - **Purpose**: This option starts a background worker that will aggregate your certifications with a custom interval.
    - **BLOOCK_INTEGRITY_AGGREGATE_INTERVAL** (**_OPTIONAL_**)
      - **Description**: worker interval with seconds.
      - **Default**: 36000
      - **Purpose**: This option allows you to set your worker with the interval (with seconds) you need.

    Finally, in case you want to store your files locally, with these variables you can edit the configuration:

    - **BLOOCK_TMP_DIR** (**_OPTIONAL_**)
      - **Description**: The temporary directory path for storing processed files.
      - **Default**: ./tmp
      - **Purpose**: Processed files can be temporarily stored in this directory while waiting for integrity confirmation. You can configure it to a specific directory path that suits your storage needs.
    - **BLOOCK_STORAGE_LOCAL_PATH** (**_OPTIONAL_**)
      - **Description**: The local directory where files will be stored when using `LOCAL` availability type.
      - **Default**: ./data
      - **Purpose**: Processed files will be stored in this directory only when `LOCAL` availability type is specified when invoking the process endpoint.
    - **BLOOCK_STORAGE_LOCAL_STRATEGY** (**_OPTIONAL_**)
      - **Description**: The filename strategy to follow when using `LOCAL` availability type.
      - **Default**: HASH
      - **Purpose**: Currently it supports two possible values: `HASH` (default) will set the file name to the content's hash and `FILENAME` will try to compute the file name based on the URL or the file provided (WARNING: this strategy may overwrite files if two of them compute to the same filename, i.e. uploading to files with the same name).

    These configuration variables provide fine-grained control over the behavior of the Bloock Managed API. You can adjust them to match your specific requirements and deployment environment.

    ### Database Support

    The Bloock Managed API is designed to be flexible when it comes to database integration. It supports three types of relational databases: **MemDB (SQLite)**, **MySQL**, and **Postgres**. The choice of database type depends on your specific requirements and infrastructure.

    Here are the supported database types and how to configure them:

    - **MySQL**: To connect to a MySQL database, you can use the following connection string format
      ```
      mysql://user:password@tcp(host:port)/database
      ```

    Replace `user`, `password`, `host`, `port`, and `database` with your MySQL database credentials and configuration. This format allows you to specify the MySQL database you want to connect to.

    - **Postgres**: For PostgreSQL database integration, use the following connection string format:

      ```
      postgres://user:password@host/database?sslmode=disable
      ```

    Similar to MySQL, replace `user`, `password`, `host`, and `database` with your PostgreSQL database details. Additionally, you can set the `sslmode` as needed. The `sslmode=disable` option is used in the example, but you can adjust it according to your PostgreSQL server's SSL requirements.

    - **MemDB (SQLite)**: The API also supports in-memory SQLite databases. To use SQLite, you can specify the connection string as follows:

      ```
      file:dbname?mode=memory&cache=shared&_fk=1
      ```

    In this format, `dbname` represents the name of your SQLite database. The API will create an in-memory SQLite database with this name.

    If you already have an existing database infrastructure and want to use it with the Bloock Managed API, you have the flexibility to provide your custom database connection string.

    `Variable: BLOOCK_DB_CONNECTION_STRING`

    The API provides a configuration variable called `BLOOCK_DB_CONNECTION_STRING` that allows you to specify your own database connection string independently of the way you run the API. Whether you run the API as a Docker container or as a standalone application, you can always set this variable to point to your existing database server.
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/bloock/bloock-managed-api/master/LICENSE'
  contact:
    name: BLOOCK
    url: 'https://www.bloock.com/contact'
    email: support@bloock.com
  termsOfService: 'https://www.bloock.com/legal'
servers:
  - url: 'https://managed-api.bloock.com'
    description: ''
paths:
  /v1/process:
    parameters: []
    post:
      summary: Send file
      operationId: post-v1-process
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - process_id
                  - hash
                properties:
                  success:
                    type: boolean
                    x-stoplight:
                      id: 6nk5hs9ov2gx9
                    description: Success status of the operation.
                  process_id:
                    type: string
                    x-stoplight:
                      id: x9uj3yo2s7hr8
                    description: The process id created
                  hash:
                    type: string
                    x-stoplight:
                      id: oy2ker3u3yph8
                    description: The hash of the processed file
                  integrity:
                    type: object
                    x-stoplight:
                      id: nm5ff04vf7jdp
                    description: This field will only appear if integrity has been enabled for this request.
                    properties:
                      enabled:
                        type: boolean
                        x-stoplight:
                          id: 4e7yf66wlb3de
                        description: Whether integrity has ben enabled for this request.
                      anchor_id:
                        type: integer
                        x-stoplight:
                          id: r5qd01cp8i2av
                        description: The Anchor ID that has been linked to this file.
                  authenticity:
                    type: object
                    x-stoplight:
                      id: si8rteha2kwxh
                    description: This field will only appear if authenticity has been enabled for this request.
                    properties:
                      enabled:
                        type: boolean
                        x-stoplight:
                          id: 4erdpf387ln2x
                        description: Whether authenticity has ben enabled for this request.
                      signatures:
                        type: array
                        x-stoplight:
                          id: d5muabqap5kat
                        description: The signatures included in the processed file.
                        items:
                          $ref: '#/components/schemas/Signature'
                          x-stoplight:
                            id: sms41yghcjz2v
                  encryption:
                    type: object
                    x-stoplight:
                      id: mz98kfv0w6dpe
                    description: This field will only appear if encryption has been enabled for this request.
                    properties:
                      enabled:
                        type: boolean
                        x-stoplight:
                          id: qwx305csysye6
                        description: Whether encryption has ben enabled for this request.
                      key:
                        type: string
                        x-stoplight:
                          id: 3nl186bhzgoq0
                        description: The public key of the key used for encrypting the file.
                      alg:
                        x-stoplight:
                          id: d8c4dt9khrv2k
                        enum:
                          - A256GCM
                          - A256GCM_M
                          - RSA
                          - RSA_M
                        example: RSA
                        description: The encryption algorithm used.
                      subject:
                        type: string
                        x-stoplight:
                          id: bsvptook65qiy
                        description: 'If availabile, the subject of the certificate used for encrypting this file.'
                  availability:
                    type: object
                    x-stoplight:
                      id: g8t74psnqcx9z
                    description: This field will only appear if availability has been enabled for this request.
                    properties:
                      enabled:
                        type: boolean
                        x-stoplight:
                          id: 8xl4dxi2a55t1
                        description: Whether availability has ben enabled for this request.
                      type:
                        $ref: '#/components/schemas/AvailabilityType'
                        x-stoplight:
                          id: 0gzvvk61hw3wf
                        description: The availability type where the processed file has been published to.
                      id:
                        type: string
                        x-stoplight:
                          id: 6f8r2rnhirm9r
                        description: 'If available, the ID associated with the availability type used.'
                      url:
                        type: string
                        x-stoplight:
                          id: akre7aaur7lyo
                        format: uri
                        description: The URL where the processed file has been published.
                      content_type:
                        type: string
                        x-stoplight:
                          id: obkrfqark53jq
                        description: 'If detected, the MIME type of the file.'
                      size:
                        type: integer
                        x-stoplight:
                          id: w9p1ohsrzd50l
                        description: 'The size, in bytes, of the processed file.'
              examples:
                Example 1:
                  value:
                    success: true
                    process_id: f1e7e532-d817-4ac8-b43a-ca6aa7cc9118
                    hash: baa09b1a6a851ecaa84936746e076356c2f060b6508de0b2d685252dadb44b39
                    integrity:
                      enabled: true
                      anchor_id: 369805
                    authenticity:
                      enabled: true
                      signatures:
                        - signature: b3866ed3f169e241a1ace56e51b09a59dc13327d6406cd17930e3b8b627045484cb378d2a74db13f9109bafb478ac38730d580cd0e37de55e1d3dc407f50cb32
                          alg: ES256K_M
                          kid: 04aef8198dee9905ab7d984b88618617a5b5fbc035916ad36b41d726b3bb2717a67af307241b749174b346a82cfbfd48e5ed050f452ef628e3ba8f5c50da7c63e5
                          message_hash: e920f86ee9687d365b8085222df2000cc5e72b1dc0bc3c6f42705bff5e625b0b
                          subject: 'C=US,CN=Bloock'
                    encryption:
                      enabled: true
                      key: |
                        -----BEGIN PUBLIC KEY-----
                        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs+XX9p/A/MW95k16WNjJ
                        xqpUw/dmLHpxo+YNFeJUfGZRHhQ3cRNFtt6kBGDpbBcnJDVcsR81FxC0prYwMT8J
                        otzla2i89bG+szvHIAUnZljMuhnXrLhEkKcHw/QYU3p6LsL4CTt6qWnCxj4JTIET
                        +SdM8qXOdGJ5X/y4Hnzljc+nevGImsWY3BdK68SP5TqFz+jENPRDlzwwaSi4NRAW
                        yF+vCn2fV+sZ2nZmTCPOs4Mn7okw05cty0hBomt+LiM7te+fpFVINFOWNCIhs36F
                        JDT3Bfv8xCo0h8K3qCxFaukv7uxOezrr55afGG+DXRU5c80QrzMoSHAg2UyABwgE
                        gQIDAQAB
                        -----END PUBLIC KEY-----
                      alg: RSA_M
                      subject: 'C=US,CN=Bloock'
                    availability:
                      enabled: true
                      type: IPFS
                      id: IPFS HASH
                      url: 'http://example.com'
                      content_type: application/pdf
                      size: 52550
      x-stoplight:
        id: 0d90x9siw4hkx
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  x-stoplight:
                    id: c32m5v0esr99h
                  format: binary
                url:
                  type: string
                  x-stoplight:
                    id: g2xxltyh2gh5w
                  format: uri
                integrity.enabled:
                  type: boolean
                  x-stoplight:
                    id: weqiy55twb5hb
                integrity.aggregate:
                  type: boolean
                  x-stoplight:
                    id: 8d4driqt38kvi
                authenticity.enabled:
                  type: boolean
                  x-stoplight:
                    id: y4iexp1idt2p7
                  description: 'If the file it''s going to be aggregated or not. You must have the API aggregate mode activated. This file will be saved but not certified, so it will be aggregated later with other aggregated files.'
                authenticity.keySource:
                  $ref: '#/components/schemas/KeySource'
                  x-stoplight:
                    id: z1irbxf8bif6h
                authenticity.key:
                  type: string
                  x-stoplight:
                    id: 9ehrbza4bq21n
                  format: uuid
                authenticity.accessEnabled:
                  type: boolean
                  x-stoplight:
                    id: h0xgk6xxpioom
                authenticity.accessType:
                  $ref: '#/components/schemas/AccessControlType'
                  x-stoplight:
                    id: jgbt3ygt5fad7
                authenticity.accessCode:
                  type: string
                  x-stoplight:
                    id: uhikqrbjv1rix
                encryption.enabled:
                  type: boolean
                  x-stoplight:
                    id: e2ybqlsdd4r0a
                encryption.keySource:
                  $ref: '#/components/schemas/KeySource'
                  x-stoplight:
                    id: fh5avo71o7gpn
                encryption.key:
                  type: string
                  x-stoplight:
                    id: ixzcjj0w5wurb
                  format: uuid
                encryption.accessEnabled:
                  type: boolean
                  x-stoplight:
                    id: hqvi0xt3vmfnz
                encryption.accessType:
                  $ref: '#/components/schemas/AccessControlType'
                  x-stoplight:
                    id: 0wh9c4awaor4q
                encryption.accessCode:
                  x-stoplight:
                    id: lmi6iduarm9gb
                  type: string
                availability.enabled:
                  type: boolean
                  x-stoplight:
                    id: 91itknfc7czo6
                availability.type:
                  $ref: '#/components/schemas/AvailabilityType'
                  x-stoplight:
                    id: 2d14qyggo8ero
            examples:
              All actions:
                value:
                  url: 'http://example.com'
                  integrity.enabled: true
                  authenticity.enabled: true
                  authenticity.keySource: MANAGED_KEY
                  authenticity.key: 02e580b0-5c03-4f8d-a684-10658829fdbd
                  encryption.enabled: true
                  encryption.keySource: MANAGED_CERTIFICATE
                  encryption.key: 9893cc1e-d391-4bab-91e6-2106ae6d59f5
                  availability.enabled: true
                  availability.type: IPFS
              Integrity + Availability:
                value:
                  url: 'http://example.com'
                  integrity.enabled: true
              Authenticity + Availability:
                value:
                  url: 'http://example.com'
                  authenticity.enabled: true
                  authenticity.keySource: MANAGED_CERTIFICATE
                  authenticity.key: 02e580b0-5c03-4f8d-a684-10658829fdbd
                  availability.enabled: true
                  availability.type: IPFS
              Authenticity + Access Control TOTP:
                value:
                  url: 'http://example.com'
                  authenticity.enabled: true
                  authenticity.keySource: MANAGED_KEY
                  authenticity.key: 02e580b0-5c03-4f8d-a684-10658829fdbd
                  authenticity.accessEnabled: true
                  authenticity.accessType: TOTP
                  authenticity.accessCode: 236787
      parameters: []
      security:
        - {}
        - secret: []
        - api-key: []
      description: |-
        This endpoint will process a file provided either uploaded or referenced by a URL.

        The actions (integrity, authenticity, encryption or availability) that will be applied to the file can be fully configured with this request's body.
  /v1/webhook:
    post:
      summary: Webhook
      operationId: post-v1-webhook
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    x-stoplight:
                      id: eqpdeghh34ir9
      x-stoplight:
        id: 5pns9fx3xsw1c
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  created_at: 1705261560
                  finalized: true
                  id: 726283
                  message_count: 1
                  network:
                    anchor_id: 726283
                    created_at: 1705261646
                    name: bloock_chain
                    status: Confirmed
                    test: true
                    tx_hash: '0x4a7a62fff40f39ac55ac7a2a07e42acbc4b4fa20f4e9114adc9e1794a722f813'
                  root: 061ac07cf5b439dc4d561627038f1e1a186ac672d2effa50ea4175059ecb72f8
                  test: true
              required:
                - id
                - root
                - message_count
                - network
                - test
                - finalized
                - created_at
              properties:
                id:
                  type: integer
                  description: The Anchor ID that has been processed.
                root:
                  type: string
                  description: The root associated to this anchor.
                message_count:
                  type: integer
                  description: The number of records included in this anchor.
                network:
                  type: object
                  required:
                    - anchor_id
                    - created_at
                    - name
                    - status
                    - test
                    - tx_hash
                  description: The network transaction associated with this anchor.
                  properties:
                    anchor_id:
                      type: integer
                      description: The Anchor ID associated with this network transaction.
                    created_at:
                      type: integer
                      description: The timestamp in unix seconds when this network transaction was created.
                    name:
                      $ref: '#/components/schemas/Networks'
                      description: The name of network.
                    status:
                      type: string
                      description: The status of the transaction.
                    test:
                      type: boolean
                      description: Whether this network transaction corresponds to BLOOCK's test environment or not.
                    tx_hash:
                      type: string
                      description: The transaction hash associated to this network transaction.
                test:
                  type: boolean
                  description: Whether this anchor corresponds to BLOOCK's test environment or not.
                finalized:
                  type: boolean
                  description: Whether this anchor is considered as finalized or not.
                created_at:
                  type: integer
                  description: The timestamp in unix seconds when this anchor was created.
      description: This endpoint will be used by BLOOCK in order to notify this API that a certain Anchor ID has been correctly processed.
  /v1/health:
    get:
      summary: Health
      tags: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    x-stoplight:
                      id: 9qn2oxlcghx0m
      operationId: get-v1-health
      x-stoplight:
        id: a02lb52ivwqym
      description: Returns basic API health information for monitoring
  /v1/debug:
    post:
      summary: Debug
      tags: []
      responses:
        '200':
          description: This endpoint should always return a success response unless there's a misconfiguration issue.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    x-stoplight:
                      id: 3a572sa9e89da
      operationId: post-v1-debug
      x-stoplight:
        id: 1nm407iq2wha2
      description: |
        This endpoint is ONLY available when running the service in debug mode (see api.debug_mode configuration variable).

        It enables to debug the process of sending processed files to a Client Webhook URL (see webhook.client_endpoint_url configuration variable). 

        You can take this endpoint as a reference to implementing your own endpoint to receive processed files to your own API.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  x-stoplight:
                    id: y7ff4td4f6d8o
                  format: binary
                  description: The already processed file
  /v1/aggregate:
    put:
      summary: Aggregate Files
      tags: []
      responses: {}
      operationId: put-v1-aggregate
      x-stoplight:
        id: 60gmy40tr3vvk
      description: |
        This endpoint is designed to process all pending files submitted with aggregation enabled. These files will then be aggregated within an internal Merkle tree, with the resulting root hash subsequently sent to the BLOOCK certification API.

        It's important to note that all files certified through this endpoint are required to utilize the 'Get Proof' endpoint for subsequent proof verification.

        This endpoint requires to have deployed the API Managed with the 'INTEGRITY_AGGREGATE' flag configuration enabled.

        Instead of requiring repeated calls to this endpoint whenever file aggregation is needed, users have the option to configure a dedicated worker to automatically execute the aggregation at specified intervals tailored to their needs. For that you need to set the 'INTEGRITY_AGGREGATE_WORKER' to true on your API Managed configuration.
      security:
        - {}
        - secret: []
        - api-key: []
  /v1/proof:
    post:
      summary: Get Proof
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  anchor:
                    type: object
                    properties:
                      anchor_id:
                        type: integer
                      networks:
                        type: array
                        items:
                          type: object
                          properties:
                            created_at:
                              type: integer
                            name:
                              type: string
                            state:
                              type: string
                            tx_hash:
                              type: string
                      root:
                        type: string
                      status:
                        type: string
                  bitmap:
                    type: string
                  depth:
                    type: string
                  leaves:
                    type: array
                    items:
                      type: string
                  nodes:
                    type: array
                    items:
                      type: string
                  root:
                    type: string
                x-examples:
                  Example 1:
                    anchor:
                      anchor_id: 930330
                      networks:
                        - created_at: 1711629388
                          name: gnosis_chain
                          state: Confirmed
                          tx_hash: '0x2e84f3e5ce43afdcfb0fddb3ff162679281679689bce6c44e05b42b864e025b7'
                      root: d7c53d2f29ec3c4dfcebc11e1b342d722241842972356d47240db7464bf5cc88
                      status: Success
                    bitmap: fff7f0
                    depth: 00010002000600070008000a000b000c000d000f00110012001300130010000e0009000500040003
                    leaves:
                      - 001886f291d6c68bef7803d0a1c96d081376f852543967e06da2c4cb5c3cf63d
                    nodes:
                      - 55ed66342de913f3ba186fc75faf791e9e03d839caeed5311c0876e3d0c8e7f7
                      - 9fb913e5859c4e3fffa7d4730c060d450ca58da27bbab1706f33abd04e12bc72
                      - b0b9c884d3910cacfa8ee5e5c428996cba295536d86c11ff50058e3375266d8c
                      - 98da95427299cacfd7be0adffd3df744bfdfcf39ebf7a74660d696a4ffb0f3dd
                      - 74819b0a29565ff3ae8a9bd421e1b273a8132304c226efe08474aaa8818ffadd
                      - 0771e0a125b1a571b3c530b2edc4a8888e3af69409fc7e5267604bb316e77753
                      - 47495e4644d38cd8af58cdb4f82870543f41e71b08bc34217c3682c674970731
                      - 0edef28d35e6c79b9c9f59d890b4e4a6a71b90485e027dca9afcd1b5153ddb00
                      - 1bab5089d1852d156247ac8514552b5b6cac1a164525499c0b9f63a725081b48
                      - 8e57d0702f304ec9b53af24ec4049452cd37d235ee6b13eae70b96374202ee12
                      - b1a1a044cfc42120a9ed0989ac07f7a2d404b9e0578a4f9292c7e84da0996376
                      - c77a80199a622ffed8320e419d0d09d155392c729e9e8b1df573b81674c5b1fe
                      - bfd721106bd81244b245798151678d86e6b3c7af88fe2882cc46bafde8499295
                      - fac1664037dab77cb4abe56b83245ced5aab8696c1d69f6240e178cb8093646a
                      - 742c01d3e7c4a89a5b95b274cf910e880fe8b736ac19b8a0ca95776db16909c2
                      - 82721420cca25511c3675401f43bfeaf597b2a87822ed5b5d0cbeb82d104bc70
                      - 9c3d5f746891a2b4f2a635049eeda46350cd228ab293048294807e7182df97cf
                      - b4a084ed8239692b318eff7bae3d212ac258dd5f1685fa1729eaac81d52a8a38
                      - a53332ca7215172e572d64e9f4fa0964d87253d88301ce03964de57441fed461
                    root: d7c53d2f29ec3c4dfcebc11e1b342d722241842972356d47240db7464bf5cc88
              examples:
                Example 1:
                  value:
                    anchor:
                      anchor_id: 930330
                      networks:
                        - created_at: 1711629388
                          name: gnosis_chain
                          state: Confirmed
                          tx_hash: '0x2e84f3e5ce43afdcfb0fddb3ff162679281679689bce6c44e05b42b864e025b8'
                      root: d7c53d2f29ec3c4dfcebc11e1b342d722241842972356d47240db7464bf5cc89
                      status: Success
                    bitmap: fff7f0
                    depth: 00010002000600070008000a000b000c000d000f00110012001300130010000e0009000500040003
                    leaves:
                      - 001886f291d6c68bef7803d0a1c96d081376f852543967e06da2c4cb5c3cf63d
                    nodes:
                      - 55ed66342de913f3ba186fc75faf791e9e03d839caeed5311c0876e3d0c8e7f8
                      - 9fb913e5859c4e3fffa7d4730c060d450ca58da27bbab1706f33abd04e12bc78
                      - b0b9c884d3910cacfa8ee5e5c428996cba295536d86c11ff50058e3375266d88
                      - 98da95427299cacfd7be0adffd3df744bfdfcf39ebf7a74660d696a4ffb0f3d8
                      - 74819b0a29565ff3ae8a9bd421e1b273a8132304c226efe08474aaa8818ffad8
                      - 0771e0a125b1a571b3c530b2edc4a8888e3af69409fc7e5267604bb316e77758
                      - 47495e4644d38cd8af58cdb4f82870543f41e71b08bc34217c3682c674970738
                      - 0edef28d35e6c79b9c9f59d890b4e4a6a71b90485e027dca9afcd1b5153ddb08
                      - 1bab5089d1852d156247ac8514552b5b6cac1a164525499c0b9f63a725081b48
                      - 8e57d0702f304ec9b53af24ec4049452cd37d235ee6b13eae70b96374202ee19
                      - b1a1a044cfc42120a9ed0989ac07f7a2d404b9e0578a4f9292c7e84da0996377
                      - c77a80199a622ffed8320e419d0d09d155392c729e9e8b1df573b81674c5b1f8
                      - bfd721106bd81244b245798151678d86e6b3c7af88fe2882cc46bafde8499298
                      - fac1664037dab77cb4abe56b83245ced5aab8696c1d69f6240e178cb80936467
                      - 742c01d3e7c4a89a5b95b274cf910e880fe8b736ac19b8a0ca95776db16909c9
                      - 82721420cca25511c3675401f43bfeaf597b2a87822ed5b5d0cbeb82d104bc78
                      - 9c3d5f746891a2b4f2a635049eeda46350cd228ab293048294807e7182df97c9
                      - b4a084ed8239692b318eff7bae3d212ac258dd5f1685fa1729eaac81d52a8a38
                      - a53332ca7215172e572d64e9f4fa0964d87253d88301ce03964de57441fed467
                    root: d7c53d2f29ec3c4dfcebc11e1b342d722241842972356d47240db7464bf5cc88
      operationId: post-v1-proof
      x-stoplight:
        id: wv2qfimj7q47c
      description: 'This endpoint facilitates the retrieval of a BLOOCK integrity proof for a specified aggregated file hash. If you have activated the ''INTEGRITY_AGGREGATE'' configuration flag within your API Managed settings and have previously submitted files with aggregate mode enabled, you can utilize this endpoint to obtain the integrity proof corresponding to a specific file hash.'
      security:
        - {}
        - secret: []
        - api-key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  message: 21a0150135e067d0a068384da981fc7b2f1327fa6d0bb582b383dfe599ada3e4
              required:
                - message
              properties:
                message:
                  type: string
                  description: File hash you receive whith the "Send File" response.
            examples:
              Example 1:
                value:
                  message: 21a0150135e067d0a068384da981fc7b2f1327fa6d0bb582b383dfe599ada3e4
  '/v1/hashes/:id/file':
    get:
      summary: Get File by Hash
      tags: []
      responses:
        '200':
          description: OK
          content: {}
      operationId: 'get-hashes-:id-file'
      x-stoplight:
        id: tvtpetgfoigwb
      security:
        - {}
        - secret: []
        - api-key: []
      description: |-
        This endpoint facilitates the retrieval of any file of the API Managed, identified by its corresponding hash.

        **The hash it's returned on "Send File" response endpoint.**
    parameters: []
  /v1/process/list:
    get:
      summary: Get Process List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    meta:
                      current_page: 1
                      per_page: 10
                      from: 1
                      to: 10
                      total: 1002
                      last_page: 101
                    processes:
                      - id: b080fd96-36e0-4691-a0e7-175fc024f65d
                        status: true
                        filename: metadata.json
                        created_at: '2024-03-28T10:07:16.758389Z'
                        success: true
                        hash: 32ebbfef67ef4d3f71ab16de443812624b50716553f0731ad8c2a3805fab1d62
                        integrity:
                          enabled: true
                          anchor_id: 450392
                        authenticity:
                          enabled: true
                          signatures:
                            - signature: c5732fab810fde150977dcfba07780e00f2c970cd11842a8ebbfd7a3dba8f0b3e446389a8496a956cae71e38e95ccfb867a2d1d1db7f872adfb09f1c59481695
                              alg: ES256K_M
                              kid: 0465fba5a3a3579f99dd69b4a57e5dc789abce472a34f05ca563b2aea62c0bac7d72ad656abace22aa18e2440f1671005451648004837f8a43f23ba26b3c5427ed
                              message_hash: 02080c840cb18a91696a1f1ff04938a62d6a65937cffe613f83b4f8ec41fea9c
                        encryption:
                          enabled: true
                          key: |
                            -----BEGIN PUBLIC KEY-----
                            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs7aROiIjUvvlHnFTRS0l
                            fZXB/S2W9pF9lkgqzkpFdCqzG+tnedFRgQ5CnkJYJdVrVRs9yhwymQl+ptkaCe5d
                            5IJJlKigH58hkg5EMEs3WUheshTBlqx5JGwEA2yXM2k7uew8XaA9tTJcmQokIkbS
                            bUbZxm99V/dGxUv0BEhribD21mzKUiIRJrLF8zZdsb9xfpjVIxw4gqaSysP2NEKo
                            p5Uf0Br7F+WsyFowZMBvkmHQdPgyduSdvjmFoEmxEx0vfFo6idIcldoZRRcn6mrf
                            Sf2vlfOFiaHwu8ERfy3mUmZJpR6K9Ox92/dqUjRTFfhGSiwfK+mr287KCF57r5+0
                            GQIDAQAB
                            -----END PUBLIC KEY-----
                          alg: RSA_M
                          subject: ''
                        availability:
                          enabled: true
                          type: hosted
                          id: 7fd526ca-5472-4fa4-a85b-d9cd2b446ec9
                          url: 'https://cdn.bloock.dev/hosting/v1/hosted/7fd526ca-5472-4fa4-a85b-d9cd2b446ec9'
                          content_type: ''
                          size: 5166
                      - id: 9a085ba3-37ff-4172-96e2-dc16cd4491f0
                        status: false
                        filename: metadata.json
                        created_at: '2024-03-28T09:59:48.372998Z'
                        success: true
                        hash: 0cc9c0ed8d2a63f1b46b1b9d749b3ae55f0866b7318e2893a3b6c8772c4ca8df
                        integrity:
                          enabled: true
                          anchor_id: 450386
                        authenticity:
                          enabled: true
                          signatures:
                            - signature: e12777e62f36a0c757ba2d33c1c6b64f23718b6593594f6bbff7d1369809fc81642bd81413553bb4a0aef07d0e0c5dfc9e496d4cab1125884303ccc38879b6da
                              alg: ES256K_M
                              kid: 0465fba5a3a3579f99dd69b4a57e5dc789abce472a34f05ca563b2aea62c0bac7d72ad656abace22aa18e2440f1671005451648004837f8a43f23ba26b3c5427ed
                              message_hash: 02080c840cb18a91696a1f1ff04938a62d6a65937cffe613f83b4f8ec41fea9c
                        encryption:
                          enabled: true
                          key: |
                            -----BEGIN PUBLIC KEY-----
                            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs7aROiIjUvvlHnFTRS0l
                            fZXB/S2W9pF9lkgqzkpFdCqzG+tnedFRgQ5CnkJYJdVrVRs9yhwymQl+ptkaCe5d
                            5IJJlKigH58hkg5EMEs3WUheshTBlqx5JGwEA2yXM2k7uew8XaA9tTJcmQokIkbS
                            bUbZxm99V/dGxUv0BEhribD21mzKUiIRJrLF8zZdsb9xfpjVIxw4gqaSysP2NEKo
                            p5Uf0Br7F+WsyFowZMBvkmHQdPgyduSdvjmFoEmxEx0vfFo6idIcldoZRRcn6mrf
                            Sf2vlfOFiaHwu8ERfy3mUmZJpR6K9Ox92/dqUjRTFfhGSiwfK+mr287KCF57r5+0
                            GQIDAQAB
                            -----END PUBLIC KEY-----
                          alg: RSA_M
                          subject: ''
                        availability:
                          enabled: true
                          type: hosted
                          id: ea149fe2-367d-42ba-812a-7cc96743b672
                          url: 'https://cdn.bloock.com/hosting/v1/hosted/ea149fe2-367d-42ba-812a-7cc96743b672'
                          content_type: ''
                          size: 5138
                      - id: 73e9488a-5c2f-4569-9e3b-a69eac957661
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 967f22134db2743a962c405acb22a3b795a40a688fbeff7825f99d7a65cc0bd9
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: a863bb4d-2697-4208-be4e-215f4fee0c6d
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 2d637b3de575b8cd92a8c4ee3ab1a717c87d32062c1b7567501388eda54952f6
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 8541c8aa-c4a6-4f22-9a87-e0c805304f5f
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 37b3eef33062ac52cf45e1fe1cef1e09b8230aa653792bf6a14938208dae8759
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: db691c3c-7e03-4b57-8454-59361b08c4cf
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 7adfc4326d17c285f57c6b7fde8019b4246a3062d2b5db823ff12f60cf9673e3
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: d3879e04-fba1-4e86-ae63-55dd0cc40088
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 435a1d1af2ea55088aaa4d9b9ed88c719629651f786ad471cf4a5710726382eb
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 227ed76f-4593-4bd0-a749-525cdd002675
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 823236fda76917b774a22500d34a063c63c13eb5192861f943df0cdebcb444de
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 8c98d67e-1859-4fbc-96a2-412aeec249f6
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: eebfd265c68faa1a1c72f2495840cc9765337f0ef1eeff71d70bda4493869ace
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 555e0767-666a-49f7-b99a-88c4305916ba
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 193ab2cadcffc17e0113fc96711ccfbd527b8c54ee6ab379c70e3aac65afa5fa
                        integrity:
                          enabled: true
                          anchor_id: 450361
                properties:
                  meta:
                    type: object
                    description: Describes the pagination
                    properties:
                      current_page:
                        type: integer
                      per_page:
                        type: integer
                      from:
                        type: integer
                      to:
                        type: integer
                      total:
                        type: integer
                        description: Total of results
                      last_page:
                        type: integer
                        description: Number of the last page you can filter
                  processes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: UUID associated to the process
                        status:
                          type: boolean
                          description: 'If status == true, means the certification was transacted and confimed on blockchain. Otherwise the transaction was transacted but is waiting confirmation'
                        filename:
                          type: string
                        created_at:
                          type: string
                        success:
                          type: boolean
                          description: 'This success refers to the global process endpoint execution, should be always true'
                        hash:
                          type: string
                        integrity:
                          type: object
                          properties:
                            enabled:
                              type: boolean
                            anchor_id:
                              type: integer
                        authenticity:
                          type: object
                          properties:
                            enabled:
                              type: boolean
                            signatures:
                              type: array
                              items:
                                type: object
                                properties:
                                  signature:
                                    type: string
                                  alg:
                                    type: string
                                  kid:
                                    type: string
                                  message_hash:
                                    type: string
                        encryption:
                          type: object
                          properties:
                            enabled:
                              type: boolean
                            key:
                              type: string
                            alg:
                              type: string
                            subject:
                              type: string
                        availability:
                          type: object
                          properties:
                            enabled:
                              type: boolean
                            type:
                              type: string
                            id:
                              type: string
                            url:
                              type: string
                            content_type:
                              type: string
                            size:
                              type: integer
              examples:
                Example 1:
                  value:
                    meta:
                      current_page: 1
                      per_page: 10
                      from: 1
                      to: 10
                      total: 1002
                      last_page: 101
                    processes:
                      - id: b080fd96-36e0-4691-a0e7-175fc024f65d
                        status: true
                        filename: metadata.json
                        created_at: '2024-03-28T10:07:16.758389Z'
                        success: true
                        hash: 32ebbfef67ef4d3f71ab16de443812624b50716553f0731ad8c2a3805fab1d62
                        integrity:
                          enabled: true
                          anchor_id: 450392
                        authenticity:
                          enabled: true
                          signatures:
                            - signature: c5732fab810fde150977dcfba07780e00f2c970cd11842a8ebbfd7a3dba8f0b3e446389a8496a956cae71e38e95ccfb867a2d1d1db7f872adfb09f1c59481695
                              alg: ES256K_M
                              kid: 0465fba5a3a3579f99dd69b4a57e5dc789abce472a34f05ca563b2aea62c0bac7d72ad656abace22aa18e2440f1671005451648004837f8a43f23ba26b3c5427ed
                              message_hash: 02080c840cb18a91696a1f1ff04938a62d6a65937cffe613f83b4f8ec41fea9c
                        encryption:
                          enabled: true
                          key: |
                            -----BEGIN PUBLIC KEY-----
                            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs7aROiIjUvvlHnFTRS0l
                            fZXB/S2W9pF9lkgqzkpFdCqzG+tnedFRgQ5CnkJYJdVrVRs9yhwymQl+ptkaCe5d
                            5IJJlKigH58hkg5EMEs3WUheshTBlqx5JGwEA2yXM2k7uew8XaA9tTJcmQokIkbS
                            bUbZxm99V/dGxUv0BEhribD21mzKUiIRJrLF8zZdsb9xfpjVIxw4gqaSysP2NEKo
                            p5Uf0Br7F+WsyFowZMBvkmHQdPgyduSdvjmFoEmxEx0vfFo6idIcldoZRRcn6mrf
                            Sf2vlfOFiaHwu8ERfy3mUmZJpR6K9Ox92/dqUjRTFfhGSiwfK+mr287KCF57r5+0
                            GQIDAQAB
                            -----END PUBLIC KEY-----
                          alg: RSA_M
                          subject: ''
                        availability:
                          enabled: true
                          type: hosted
                          id: 7fd526ca-5472-4fa4-a85b-d9cd2b446ec9
                          url: 'https://cdn.bloock.dev/hosting/v1/hosted/7fd526ca-5472-4fa4-a85b-d9cd2b446ec9'
                          content_type: ''
                          size: 5166
                      - id: 9a085ba3-37ff-4172-96e2-dc16cd4491f0
                        status: false
                        filename: metadata.json
                        created_at: '2024-03-28T09:59:48.372998Z'
                        success: true
                        hash: 0cc9c0ed8d2a63f1b46b1b9d749b3ae55f0866b7318e2893a3b6c8772c4ca8df
                        integrity:
                          enabled: true
                          anchor_id: 450386
                        authenticity:
                          enabled: true
                          signatures:
                            - signature: e12777e62f36a0c757ba2d33c1c6b64f23718b6593594f6bbff7d1369809fc81642bd81413553bb4a0aef07d0e0c5dfc9e496d4cab1125884303ccc38879b6da
                              alg: ES256K_M
                              kid: 0465fba5a3a3579f99dd69b4a57e5dc789abce472a34f05ca563b2aea62c0bac7d72ad656abace22aa18e2440f1671005451648004837f8a43f23ba26b3c5427ed
                              message_hash: 02080c840cb18a91696a1f1ff04938a62d6a65937cffe613f83b4f8ec41fea9c
                        encryption:
                          enabled: true
                          key: |
                            -----BEGIN PUBLIC KEY-----
                            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs7aROiIjUvvlHnFTRS0l
                            fZXB/S2W9pF9lkgqzkpFdCqzG+tnedFRgQ5CnkJYJdVrVRs9yhwymQl+ptkaCe5d
                            5IJJlKigH58hkg5EMEs3WUheshTBlqx5JGwEA2yXM2k7uew8XaA9tTJcmQokIkbS
                            bUbZxm99V/dGxUv0BEhribD21mzKUiIRJrLF8zZdsb9xfpjVIxw4gqaSysP2NEKo
                            p5Uf0Br7F+WsyFowZMBvkmHQdPgyduSdvjmFoEmxEx0vfFo6idIcldoZRRcn6mrf
                            Sf2vlfOFiaHwu8ERfy3mUmZJpR6K9Ox92/dqUjRTFfhGSiwfK+mr287KCF57r5+0
                            GQIDAQAB
                            -----END PUBLIC KEY-----
                          alg: RSA_M
                          subject: ''
                        availability:
                          enabled: true
                          type: hosted
                          id: ea149fe2-367d-42ba-812a-7cc96743b672
                          url: 'https://cdn.bloock.com/hosting/v1/hosted/ea149fe2-367d-42ba-812a-7cc96743b672'
                          content_type: ''
                          size: 5138
                      - id: 73e9488a-5c2f-4569-9e3b-a69eac957661
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 967f22134db2743a962c405acb22a3b795a40a688fbeff7825f99d7a65cc0bd9
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: a863bb4d-2697-4208-be4e-215f4fee0c6d
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 2d637b3de575b8cd92a8c4ee3ab1a717c87d32062c1b7567501388eda54952f6
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 8541c8aa-c4a6-4f22-9a87-e0c805304f5f
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 37b3eef33062ac52cf45e1fe1cef1e09b8230aa653792bf6a14938208dae8759
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: db691c3c-7e03-4b57-8454-59361b08c4cf
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 7adfc4326d17c285f57c6b7fde8019b4246a3062d2b5db823ff12f60cf9673e3
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: d3879e04-fba1-4e86-ae63-55dd0cc40088
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 435a1d1af2ea55088aaa4d9b9ed88c719629651f786ad471cf4a5710726382eb
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 227ed76f-4593-4bd0-a749-525cdd002675
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 823236fda76917b774a22500d34a063c63c13eb5192861f943df0cdebcb444de
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 8c98d67e-1859-4fbc-96a2-412aeec249f6
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: eebfd265c68faa1a1c72f2495840cc9765337f0ef1eeff71d70bda4493869ace
                        integrity:
                          enabled: true
                          anchor_id: 450361
                      - id: 555e0767-666a-49f7-b99a-88c4305916ba
                        status: true
                        filename: random.pdf
                        created_at: '2024-03-28T09:32:53.584085Z'
                        success: true
                        hash: 193ab2cadcffc17e0113fc96711ccfbd527b8c54ee6ab379c70e3aac65afa5fa
                        integrity:
                          enabled: true
                          anchor_id: 450361
      operationId: get-v1-process-list
      x-stoplight:
        id: 9i4baugalxg76
      description: |
        This endpoint provides a paginated list containing all tracked processes you have initiated. When submitting a file, numerous pieces of information can be tracked, including:

        - Certification Information: Details regarding certification if the file is sent to a blockchain.
        - Authenticity Information: If authenticity is enabled, retrieval of the key or certificate information along with the algorithm used.
        - Encryption Information: Similarly, encryption details are tracked if applicable.
        - Availability Information: For files using availability, retrieval of the URI where the file was saved, its size, and content type.

        All of this information is systematically saved for each file. Consequently, users can retrieve it as a comprehensive list using this endpoint.
      security:
        - {}
        - secret: []
      parameters:
        - schema:
            type: number
          in: query
          name: page
          description: the page number.
          required: true
        - schema:
            type: number
          in: query
          name: per_page
          description: the number of elements per page.
          required: true
  '/v1/process/:id':
    get:
      summary: Get Process By ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  status:
                    type: boolean
                  filename:
                    type: string
                  created_at:
                    type: string
                  success:
                    type: boolean
                  hash:
                    type: string
                  integrity:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      anchor_id:
                        type: integer
                  authenticity:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            signature:
                              type: string
                            alg:
                              type: string
                            kid:
                              type: string
                            message_hash:
                              type: string
                  encryption:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      key:
                        type: string
                      alg:
                        type: string
                      subject:
                        type: string
                  availability:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      type:
                        type: string
                      id:
                        type: string
                      url:
                        type: string
                      content_type:
                        type: string
                      size:
                        type: integer
                x-examples:
                  Example 1:
                    id: b080fd96-36e0-4691-a0e7-175fc024f65d
                    status: true
                    filename: metadata.json
                    created_at: '2024-03-28T10:07:16.758389Z'
                    success: true
                    hash: 32ebbfef67ef4d3f71ab16de443812624b50716553f0731ad8c2a3805fab1d62
                    integrity:
                      enabled: true
                      anchor_id: 450392
                    authenticity:
                      enabled: true
                      signatures:
                        - signature: c5732fab810fde150977dcfba07780e00f2c970cd11842a8ebbfd7a3dba8f0b3e446389a8496a956cae71e38e95ccfb867a2d1d1db7f872adfb09f1c59481695
                          alg: ES256K_M
                          kid: 0465fba5a3a3579f99dd69b4a57e5dc789abce472a34f05ca563b2aea62c0bac7d72ad656abace22aa18e2440f1671005451648004837f8a43f23ba26b3c5427ed
                          message_hash: 02080c840cb18a91696a1f1ff04938a62d6a65937cffe613f83b4f8ec41fea9c
                    encryption:
                      enabled: true
                      key: |
                        -----BEGIN PUBLIC KEY-----
                        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs7aROiIjUvvlHnFTRS0l
                        fZXB/S2W9pF9lkgqzkpFdCqzG+tnedFRgQ5CnkJYJdVrVRs9yhwymQl+ptkaCe5d
                        5IJJlKigH58hkg5EMEs3WUheshTBlqx5JGwEA2yXM2k7uew8XaA9tTJcmQokIkbS
                        bUbZxm99V/dGxUv0BEhribD21mzKUiIRJrLF8zZdsb9xfpjVIxw4gqaSysP2NEKo
                        p5Uf0Br7F+WsyFowZMBvkmHQdPgyduSdvjmFoEmxEx0vfFo6idIcldoZRRcn6mrf
                        Sf2vlfOFiaHwu8ERfy3mUmZJpR6K9Ox92/dqUjRTFfhGSiwfK+mr287KCF57r5+0
                        GQIDAQAB
                        -----END PUBLIC KEY-----
                      alg: RSA_M
                      subject: ''
                    availability:
                      enabled: true
                      type: hosted
                      id: 7fd526ca-5472-4fa4-a85b-d9cd2b446ec9
                      url: 'https://cdn.bloock.dev/hosting/v1/hosted/7fd526ca-5472-4fa4-a85b-d9cd2b446ec9'
                      content_type: ''
                      size: 5166
              examples:
                Example 1:
                  value:
                    id: b080fd96-36e0-4691-a0e7-175fc024f65d
                    status: true
                    filename: metadata.pdf
                    created_at: '2024-03-28T10:07:16.758389Z'
                    success: true
                    hash: 32ebbfef67ef4d3f71ab16de443812624b50716553f0731ad8c2a3805fab1d62
                    integrity:
                      enabled: true
                      anchor_id: 450392
                    authenticity:
                      enabled: true
                      signatures:
                        - signature: c5732fab810fde150977dcfba07780e00f2c970cd11842a8ebbfd7a3dba8f0b3e446389a8496a956cae71e38e95ccfb867a2d1d1db7f872adfb09f1c59481695
                          alg: ES256K_M
                          kid: 0465fba5a3a3579f99dd69b4a57e5dc789abce472a34f05ca563b2aea62c0bac7d72ad656abace22aa18e2440f1671005451648004837f8a43f23ba26b3c5427ed
                          message_hash: 02080c840cb18a91696a1f1ff04938a62d6a65937cffe613f83b4f8ec41fea9c
                    encryption:
                      enabled: true
                      key: |
                        -----BEGIN PUBLIC KEY-----
                        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs7aROiIjUvvlHnFTRS0l
                        fZXB/S2W9pF9lkgqzkpFdCqzG+tnedFRgQ5CnkJYJdVrVRs9yhwymQl+ptkaCe5d
                        5IJJlKigH58hkg5EMEs3WUheshTBlqx5JGwEA2yXM2k7uew8XaA9tTJcmQokIkbS
                        bUbZxm99V/dGxUv0BEhribD21mzKUiIRJrLF8zZdsb9xfpjVIxw4gqaSysP2NEKo
                        p5Uf0Br7F+WsyFowZMBvkmHQdPgyduSdvjmFoEmxEx0vfFo6idIcldoZRRcn6mrf
                        Sf2vlfOFiaHwu8ERfy3mUmZJpR6K9Ox92/dqUjRTFfhGSiwfK+mr287KCF57r5+0
                        GQIDAQAB
                        -----END PUBLIC KEY-----
                      alg: RSA_M
                      subject: ''
                    availability:
                      enabled: true
                      type: hosted
                      id: 7fd526ca-5472-4fa4-a85b-d9cd2b446ec9
                      url: 'https://cdn.bloock.com/hosting/v1/hosted/7fd526ca-5472-4fa4-a85b-d9cd2b446ec9'
                      content_type: ''
                      size: 5166
      operationId: 'get-v1-process-:id'
      x-stoplight:
        id: ovb459blp0f7f
      description: 'This endpoint furnishes information specific to a given process UUID. Its functionality mirrors that of the ''Get Process List'' endpoint, offering identical information.'
      security:
        - {}
        - secret: []
  '/v1/process/:id/file':
    get:
      summary: Get File by Process ID
      tags: []
      responses: {}
      operationId: 'get-v1-process-:id-file'
      x-stoplight:
        id: l08pwzlytoeis
      description: |-
        This endpoint facilitates the retrieval of any file of the API Managed, identified by its corresponding process id.

        **The process id (UUID identifier) it's returned on "Send File" response endpoint.**
components:
  schemas:
    KeySource:
      title: KeySource
      x-stoplight:
        id: 2le6pdyo0yewy
      enum:
        - LOCAL_KEY
        - MANAGED_KEY
        - LOCAL_CERTIFICATE
        - MANAGED_CERTIFICATE
    AccessControlType:
      title: AccessControlType
      x-stoplight:
        id: y1tp5flxl29j1
      enum:
        - TOTP
        - SECRET
    AvailabilityType:
      title: AvailabilityType
      x-stoplight:
        id: 2yay6geoq0cuk
      enum:
        - NONE
        - LOCAL
        - HOSTED
        - IPFS
    Signature:
      title: Signature
      x-stoplight:
        id: 2uoxknxhcac3o
      type: object
      properties:
        signature:
          type: string
          x-stoplight:
            id: qwmrexpijsc0y
          description: The computed signature.
        alg:
          x-stoplight:
            id: vjkxrwie95taa
          description: The signature algorithm.
          enum:
            - ES256K
            - ES256K_M
            - RSA
            - RSA_M
            - BJJ
            - BJJ_M
          example: RSA
        kid:
          type: string
          x-stoplight:
            id: tddqz0v5eiid4
          description: The public key of the key used for signing the file.
        message_hash:
          type: string
          x-stoplight:
            id: pmdqbbxnmwmxl
          description: The hash of the file that has produced the signature.
        subject:
          type: string
          x-stoplight:
            id: gmm99tkazbd9u
          description: 'If availabile, the subject of the certificate used for this signature.'
    Networks:
      title: Networks
      x-stoplight:
        id: aftsu7lztxaio
      enum:
        - ethereum_mainnet
        - gnosis_chain
        - polygon_chain
        - bloock_chain
  securitySchemes:
    secret:
      type: http
      scheme: bearer
      description: 'If enabled, requests must be authenticated using the secret defined in the Configuration.'
    api-key:
      name: API Key
      type: apiKey
      in: header
      description: 'Optionaly, you can use the X-API-KEY header to override the API Key that will be used for this specific request.'
